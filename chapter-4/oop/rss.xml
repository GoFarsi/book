<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><author/><title>4.23 شی گرایی در زبان گو on زبان گو فارسی</title><link>https://book.gofarsi.ir/chapter-4/oop/</link><description>Recent content in 4.23 شی گرایی در زبان گو on زبان گو فارسی</description><generator>Hugo -- gohugo.io</generator><language>fa</language><copyright>2023 GoFarsi All rights reserved</copyright><atom:link href="https://book.gofarsi.ir/chapter-4/oop/rss.xml" rel="self" type="application/rss+xml"/><item><author/><title>4.23.1 کپسوله سازی (Encapsulation)</title><link>https://book.gofarsi.ir/chapter-4/oop/go-encapsulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-encapsulation/</guid><description>&lt;p&gt;کپسوله سازی در زبان گو یا هر زبان دیگری یک مفهوم مشترک می باشد که شما یک داده یک تابع را پشت یک آبجکت یا یک واحد مستقل بپوشانید. با اینکار شما جلوی دسترسی مستقیم برروی داده را میگیرید. این کار در شی گرایی کمک می کند شما کدهای خود را بهتر سازماندهی کنید و جلوی دسترسی مستقیم ناخواسته را بگیرید.&lt;/p&gt;
&lt;p&gt;در زبان گو برای Public/Private کردن یک آبجکت یا تابع کلمه کلیدی به نام public/private ندارد ولی در عوض شما می توانید داخل هر پکیج با بزرگ یا کوچک کردن حرف اول نام هر آبجکت یا تابع جلو دسترسی مستقیم را بگیرید.&lt;/p&gt;</description></item><item><author/><title>4.22.2 ارث بری</title><link>https://book.gofarsi.ir/chapter-4/oop/go-inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-inheritance/</guid><description>&lt;p&gt;در زبان گو ارث بری در واقع type embedding هست با استفاده &lt;a href="../../../chapter-2/type-embedding/"&gt;type embedding&lt;/a&gt; می توانید یک type را داخل type دیگری جاسازی کنید و به واسطه type والد قابل دسترس است.&lt;/p&gt;
&lt;div class="go-playground"&gt;
&lt;pre class="line-numbers"&gt;&lt;code class="language-go"&gt;package main
import "fmt"
type Person struct {
Name string
}
func (p *Person) Introduce() {
fmt.Printf("Hi, my name is %s\n", p.Name)
}
type Student struct {
Person
School string
}
func main() {
s := &amp;Student{Person{"John Doe"}, "Go University"}
s.Introduce()
}&lt;/code&gt;&lt;/pre&gt;
&lt;button class="run-code"&gt;▶ اجرای کد&lt;/button&gt;
&lt;button class="copy-code"&gt;کپی&lt;/button&gt;
&lt;button class="hide-output"&gt;✖ بستن خروجی&lt;/button&gt;
&lt;pre class="run-output hidden"&gt;&lt;/pre&gt;
&lt;/div&gt;</description></item><item><author/><title>4.23.3 پلی مورفیسم (Polymorphism)</title><link>https://book.gofarsi.ir/chapter-4/oop/go-polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-polymorphism/</guid><description>&lt;p&gt;پلی مورفیسم یکی از مفاهیم مهم در شی گرایی می باشد و هدف استفاده از پلی مورفیسم این است بین آبجکت ها رفتار مشترکی ایجاد کنیم. در زبان گو شما می توانید یک اینترفیس تعریف کنید و برای ساختارهای مختلف متدهای اینترفیس را پیاده سازی کنید.&lt;/p&gt;
&lt;p&gt;به مثال زیر توجه کنید :&lt;/p&gt;
&lt;div class="go-playground"&gt;
&lt;pre class="line-numbers"&gt;&lt;code class="language-go"&gt;package main
import "fmt"
// Shape is an interface that defines a method named `Area`
type Shape interface {
Area() float64
}
// Rectangle is a struct that represents a rectangle
type Rectangle struct {
width float64
height float64
}
// Area implements the Shape interface for Rectangle
func (r Rectangle) Area() float64 {
return r.width * r.height
}
// Circle is a struct that represents a circle
type Circle struct {
radius float64
}
// Area implements the Shape interface for Circle
func (c Circle) Area() float64 {
return 3.14 * c.radius * c.radius
}
func CalcArea(shapes ...Shape) {
for _, shape := range shapes {
fmt.Println(shape.Area())
}
}
func main() {
r := Rectangle{width: 10, height: 5}
c := Circle{radius: 5}
CalcArea(r, c)
}&lt;/code&gt;&lt;/pre&gt;
&lt;button class="run-code"&gt;▶ اجرای کد&lt;/button&gt;
&lt;button class="copy-code"&gt;کپی&lt;/button&gt;
&lt;button class="hide-output"&gt;✖ بستن خروجی&lt;/button&gt;
&lt;pre class="run-output hidden"&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;در کد فوق ما یک اینترفیس Shape داریم که داخلش یک متد به نام Area هست حال این متد را برای ساختارهای Rectangle و Circle پیاده سازی کردیم که مساحت دایره و مستطیل را محاسبه کنیم. حال یک تابع CalcArea داریم به عنوان پارامتر slice از Shape ها میگیرد که ما داخل تابع main ساختار Rectangle و Circle که متد Area اینترفیس Shape را پیاده سازی کرده اند را پاس دادیم و در نهایت محاسبه مساحت را در خروجی چاپ می کند.&lt;/p&gt;</description></item><item><author/><title>4.23.4 overriding</title><link>https://book.gofarsi.ir/chapter-4/oop/go-overriding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-overriding/</guid><description>&lt;p&gt;در زبان گو مثل سایر زبان های شی گرا امکان overriding مستقیم یک متد وجود ندارد اما در عوض شما می توانید با استفاده از &lt;a href="../../../chapter-2/type-embedding/"&gt;type embedding&lt;/a&gt; و پیاده سازی متد یک اینترفیس این تکنیک را انجام دهید و به متدی که override انجام داده Shadow Method می گویند.&lt;/p&gt;
&lt;p&gt;به مثال زیر توجه کنید :&lt;/p&gt;
&lt;div class="go-playground"&gt;
&lt;pre class="line-numbers"&gt;&lt;code class="language-go"&gt;package main
import "fmt"
type User interface {
PrintName()
}
type Person struct {
Name string
}
func (p Person) PrintName() {
fmt.Println("My name is", p.Name)
}
type Student struct {
Person
}
func (s Student) PrintName() {
fmt.Println("I am a student and my name is", s.Name)
}
func main() {
p := Person{Name: "John"}
s := Student{Person{Name: "Jane"}}
p.PrintName()
s.PrintName()
}&lt;/code&gt;&lt;/pre&gt;
&lt;button class="run-code"&gt;▶ اجرای کد&lt;/button&gt;
&lt;button class="copy-code"&gt;کپی&lt;/button&gt;
&lt;button class="hide-output"&gt;✖ بستن خروجی&lt;/button&gt;
&lt;pre class="run-output hidden"&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;در کد فوق ما یک اینترفیس User داریم که داخلش یک متد PrintName وجود دارد که این متد نام شخص یا دانش آموز را به همراه توضیحات چاپ می کند.
حال ۲ تا ساختار داریم Person و Student که ساختار student فقط Person را جاسازی کرده است. سپس برای این ۲ ساختار متد PrintName را پیاده سازی کردیم با این تفاوت که داخل متد PrintName ساختار Student متن دیگری قرار دادیم. در تابع main ما متغیر p, s را از نوع Person و Student ایجاد و مقدار دهی کردیم. سپس متد PrintName هر دو را فراخوانی کردیم.&lt;/p&gt;</description></item><item><author/><title>4.23.5 abstraction</title><link>https://book.gofarsi.ir/chapter-4/oop/go-abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-abstraction/</guid><description>&lt;p&gt;&lt;strong&gt;Abstraction&lt;/strong&gt; (به معنای انتزاع)، فرآیند حذف یا از بین بردن برخی ویژگی‌های غیرضروری یک چیز به‌منظور کاهش، خلاصه‌سازی و به کار بردن آن در مجموعه‌ای از ویژگی‌های ضروری است. در برنامه‌نویسی شیءگرا(OOP)، انتزاع یکی از سه مفهوم اصلی (به همراه مفاهیم Encapsulation و Inheritance) است.&lt;/p&gt;
&lt;blockquote class="book-hint info"&gt;
&lt;p&gt;به نقل از ویکی پدیا :
&lt;strong&gt;انتزاع&lt;/strong&gt;،&lt;a href="https://fa.wikipedia.org/wiki/%D8%A7%D9%86%D8%AA%D8%B2%D8%A7%D8%B9#cite_note-1"&gt;[۱]&lt;/a&gt; (به &lt;a href="https://fa.wikipedia.org/wiki/%D8%B2%D8%A8%D8%A7%D9%86_%D8%A7%D9%86%DA%AF%D9%84%DB%8C%D8%B3%DB%8C" title="زبان انگلیسی"&gt;انگلیسی&lt;/a&gt;: Abstraction) &lt;strong&gt;تجرید&lt;/strong&gt; یا &lt;strong&gt;آهنجش&lt;/strong&gt; فرایند اختصار، فشرده‌سازی، و تلخیص &lt;a href="https://fa.wikipedia.org/wiki/%D8%A7%D8%B7%D9%84%D8%A7%D8%B9%D8%A7%D8%AA" title="اطلاعات"&gt;اطّلاعات&lt;/a&gt; از طریق شناسائی، استخراج و سپس، جداسازی و پنهان‌سازی جزئیّات&lt;a href="https://fa.wikipedia.org/wiki/%D8%A7%D9%86%D8%AA%D8%B2%D8%A7%D8%B9#cite_note-2"&gt;[۲]&lt;/a&gt; از کلیّات&lt;a href="https://fa.wikipedia.org/wiki/%D8%A7%D9%86%D8%AA%D8%B2%D8%A7%D8%B9#cite_note-3"&gt;[۳]&lt;/a&gt; است. &lt;em&gt;انتزاع&lt;/em&gt; در لغت به معنای جدا کردن، گرفتن، درآوردن جزئی از یک کل&lt;a href="https://fa.wikipedia.org/wiki/%D8%A7%D9%86%D8%AA%D8%B2%D8%A7%D8%B9#cite_note-4"&gt;[۴]&lt;/a&gt; و به معنای بازداشتن و امتناع کردن، برکندن و از جای کشیدن، گرفتن، و دور شدن می‌باشد.&lt;a href="https://fa.wikipedia.org/wiki/%D8%A7%D9%86%D8%AA%D8%B2%D8%A7%D8%B9#cite_note-5"&gt;[۵]&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>