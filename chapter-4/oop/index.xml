<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4.22 شی گرایی در زبان گو on زبان گو فارسی</title><link>https://book.gofarsi.ir/chapter-4/oop/</link><description>Recent content in 4.22 شی گرایی در زبان گو on زبان گو فارسی</description><generator>Hugo -- gohugo.io</generator><language>fa-IR</language><atom:link href="https://book.gofarsi.ir/chapter-4/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>4.22.1 کپسوله سازی (Encapsulation)</title><link>https://book.gofarsi.ir/chapter-4/oop/go-encapsulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-encapsulation/</guid><description>کپسوله سازی در زبان گو یا هر زبان دیگیری یک مفهوم مشترک می باشد که شما یک داده یک تابع را پشت یک آبجکت یا یک واحد مستقل بپوشانید. با اینکار شما جلوی دسترسی مستقیم برروی داده را میگیرید. این کار در شی گرایی کمک می کند شما کدهای خود را بهتر سازماندهی کندی و جلوی دسترسی مستقیم ناخواسته را میگیرید.
در زبان گو برای Public/Private کردن یک آبجکت یا تابع کلمه کلیدی به نام public/private ندارد ولی در عوض شما می توانید داخل هر پکیج با بزرگ یا کوچک کردن حرف اول نام هر آبجکت یا تابع جلو دسترسی مستقیم را بگیرید.</description></item><item><title>4.22.2 ارث بری</title><link>https://book.gofarsi.ir/chapter-4/oop/go-inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-inheritance/</guid><description>در زبان گو ارث بری در واقع type embedding هست با استفاده type embedding می توانید یک type را داخل type دیگری جاسازی کنید و به واسطه type والد قابل دسترس است.
1package main 2 3import &amp;#34;fmt&amp;#34; 4 5type Person struct { 6 Name string 7} 8 9func (p *Person) Introduce() { 10 fmt.Printf(&amp;#34;Hi, my name is %s\n&amp;#34;, p.Name) 11} 12 13type Student struct { 14 Person 15 School string 16} 17 18func main() { 19 s := &amp;amp;Student{Person{&amp;#34;John Doe&amp;#34;}, &amp;#34;Go University&amp;#34;} 20 s.</description></item><item><title>4.22.3 پلی مورفیسم (Polymorphism)</title><link>https://book.gofarsi.ir/chapter-4/oop/go-polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-polymorphism/</guid><description>پلی مورفیسم یکی از مفاهیم مهم در شی گرایی می باشد و هدف استفاده از پلی مورفیسم این است بین آبجکت ها رفتار مشترکی ایجاد کنیم. در زبان گو شما می توانید یک اینترفیس تعریف کنید و برای ساختارهای مختلف متدهای اینترفیس را پیاده سازی کنید.
به مثال زیر توجه کنید :
1package main 2 3import &amp;#34;fmt&amp;#34; 4 5// Shape is an interface that defines a method named `Area` 6type Shape interface { 7 Area() float64 8} 9 10// Rectangle is a struct that represents a rectangle 11type Rectangle struct { 12 width float64 13 height float64 14} 15 16// Area implements the Shape interface for Rectangle 17func (r Rectangle) Area() float64 { 18 return r.</description></item><item><title>4.22.4 overriding</title><link>https://book.gofarsi.ir/chapter-4/oop/go-overriding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-overriding/</guid><description>در زبان گو مثل سایر زبان های شی گرا امکان overriding مستقیم یک متد وجود ندارد اما در عوض شما می توانید با استفاده از type embedding و پیاده سازی متد یک اینترفیس این تکنیک را انجام دهید و به متدی که override انجام داده Shadow Method می گویند.
به مثال زیر توجه کنید :
1package main 2 3import &amp;#34;fmt&amp;#34; 4 5type User interface { 6 PrintName() 7} 8 9type Person struct { 10 Name string 11} 12 13func (p Person) PrintName() { 14 fmt.</description></item><item><title>4.22.5 abstraction</title><link>https://book.gofarsi.ir/chapter-4/oop/go-abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-abstraction/</guid><description>Abstraction (به معنای انتزاع)، فرآیند حذف یا از بین بردن برخی ویژگی‌های غیرضروری یک چیز به‌منظور کاهش، خلاصه‌سازی و به کار بردن آن در مجموعه‌ای از ویژگی‌های ضروری است. در برنامه‌نویسی شیءگرا(OOP)، انتزاع یکی از سه مفهوم اصلی (به همراه مفاهیم Encapsulation و Inheritance) است.
به نقل از ویکی پدیا : انتزاع،[۱] (به انگلیسی: Abstraction) تجرید یا آهنجش فرایند اختصار، فشرده‌سازی، و تلخیص اطّلاعات از طریق شناسائی، استخراج و سپس، جداسازی و پنهان‌سازی جزئیّات[۲] از کلیّات[۳] است.</description></item></channel></rss>