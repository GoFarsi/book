name: Release application

on:
  workflow_run:
    workflows: ["Publish Github Pages"]
    types:
      - completed
    branches:
      - main
  push:
    tags:
      - "v*.*.*"
  pull_request:

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: Check for gh-pages changes
        id: check_changes
        run: |
          # Get the latest commit from gh-pages branch
          LATEST_GHPAGES_COMMIT=$(git ls-remote origin gh-pages | cut -f1)
          echo "Latest gh-pages commit: $LATEST_GHPAGES_COMMIT"
          
          # Check if this commit is different from the last release
          LAST_RELEASE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_RELEASE_TAG" ]; then
            echo "No previous release found, proceeding with release"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # Get the gh-pages commit at the time of last release
            LAST_RELEASE_COMMIT=$(git rev-parse "$LAST_RELEASE_TAG")
            echo "Last release commit: $LAST_RELEASE_COMMIT"
          
            # Compare commits to see if gh-pages has changed
            if [ "$LATEST_GHPAGES_COMMIT" != "$LAST_RELEASE_COMMIT" ]; then
              echo "Changes detected in gh-pages branch"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No changes in gh-pages branch since last release"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Clone gh-pages content
        run: |
          rm -rf app/desktop/content
          git clone --branch gh-pages --single-branch --depth 1 https://github.com/GoFarsi/book.git app/desktop/content

      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Generate version
        id: version
        run: |
          chmod +x scripts/version.sh
          VERSION=$(./scripts/version.sh)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Create git tag for datetime version
        if: ${{ !contains(github.ref, 'tags/v') }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "${{ steps.version.outputs.version }}" -m "Auto-generated release ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
