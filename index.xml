<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>صفحه اصلی on زبان گو فارسی</title><link>https://book.gofarsi.ir/</link><description>Recent content in صفحه اصلی on زبان گو فارسی</description><generator>Hugo -- gohugo.io</generator><language>fa-IR</language><atom:link href="https://book.gofarsi.ir/index.xml" rel="self" type="application/rss+xml"/><item><title>اسپانسرهای کتاب</title><link>https://book.gofarsi.ir/sponsors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/sponsors/</guid><description>سرویس ابری فینگ سکوی ابری
با سکوی ابری فینگ شما روی کد تمرکز کنید، فینگ آن را اجرا می‌کند.
مشاهده سرویس
سرویس ابری دارکوب سکوی ابری
با پلتفرم ابری دارکوب، سریع و آسان از مزایا و امکانات کوبرنتیز استفاده کنید.
مشاهده سرویس
اسپانسر کتاب شوید اسپانسر
شما هم می توانید با ارایه خدمات خود اسپانسر کتاب شوید.
درخواست اسپانسر شدن</description></item><item><title>پیشگفتار</title><link>https://book.gofarsi.ir/preface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/preface/</guid><description>چرا از گو استفاده می‌کنیم؟
وقتی در نوامبر سال ۲۰۰۹ رابرت گریسیمر، راب پایک و کن تامپسون برای اولین‌بار گو را بصورت عمومی انتشار دادند، خودشان مطمئن نبودند که به‌صورت گسترده مورد استفاده قرار می‌گیرد یا خیر. تا به تاریخ انتشار این مطلب، مشخص شده،‌گو بسیار فراگیرتر و رشد آن در صنعت وسیع‌تر از چیزی بوده‌است که ایجادکنندگان آن حدس می‌زدند. این‌ها نمونه‌هایی از کاربرد گو در دنیای امروز تکنولوژی هستند:</description></item><item><title>تاریخچه</title><link>https://book.gofarsi.ir/history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/history/</guid><description>زبان گو (Go) در سال ۲۰۰۷ (به شمسی: ۱۳۸۶) توسط «شرکت گوگل» با هدف افزایش بهره‌وری برنامه‌نویسی در محیط چندهسته‌ای، رایانه‌های شبکه‌ای و کدبیس‌های بزرگ طراحی شد [به نقل از ویکی پدیا] و سپس به عنوان یک زبان کامپایلری و تایپ استاتیک در نوامبر سال ۲۰۰۹ بصورت عمومی با هدف کامپایل کارآمد ، اجرای کارآمد وسهولت برنامه نویسی معرفی شد که توسط شرکت گوگل توسعه داده شده است و بسیاری از اعضای تیم طراحی و توسعه زبان گو [Ken Thompson, Rob Pike, Robert Griesemer] سال ها تجربه در زمینه تحقیق و توسعه زبان برنامه نویسی دارند.</description></item><item><title>آموزش نصب</title><link>https://book.gofarsi.ir/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/installation/</guid><description>جهت نصب زبان گو برروی سیستم عامل مورد نظر خود در ابتدا باید نسخه مناسب با پلت فرم خود را دانلود کنید.
لینوکس در اینجا نسخه مرتبط با لینوکس خود را دانلود کنید. 1$ wget -c https://go.dev/dl/go1.xx.x.linux-amd64.tar.gz سپس دستور زیر را بزنید تا اگر نسخه قبلی وجود دارد پاک شود و نسخه جدید در مسیر usr/local/go/ جایگزین شود. 1$ sudo rm -rf /usr/local/go &amp;amp;&amp;amp; sudo tar -C /usr/local -xzf go1.xx.x.linux-amd64.tar.gz افزودن مسیر usr/local/go/bin/ به متغیرهای محیطی 1export PATH=$PATH:/usr/local/go/bin بهتر است برای اینکه هر بار ترمینال را باز میکنید و فایل go توسط shell شناخته شود دستور فوق را به فایل home/{user}/.</description></item><item><title>ابزارها, دستورات گو و معرفی IDE</title><link>https://book.gofarsi.ir/toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/toolchain/</guid><description>پس از اینکه زبان گو را برروی سیستم خود نصب کردید از طریق ترمینال و یا خط فرمان ویندوز قابل دسترس است که می‌توانید با زدن کلمه go یکسری عملیات انجام دهید:
1$ go 2Go is a tool for managing Go source code. 3 4Usage: 5 6 go &amp;lt;command&amp;gt; [arguments] 7 8The commands are: 9 10 bug start a bug report 11 build compile packages and dependencies 12 clean remove object files and cached files 13 doc show documentation for package or symbol 14 env print Go environment information 15 fix update packages to use new APIs 16 fmt gofmt (reformat) package sources 17 generate generate Go files by processing source 18 get add dependencies to current module and install them 19 install compile and install packages and dependencies 20 list list packages or modules 21 mod module maintenance 22 work workspace maintenance 23 run compile and run Go program 24 test test packages 25 tool run specified go tool 26 version print Go version 27 vet report likely mistakes in packages 28 29Use &amp;#34;go help &amp;lt;command&amp;gt;&amp;#34; for more information about a command.</description></item><item><title>نقشه یادگیری زبان گو</title><link>https://book.gofarsi.ir/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/roadmap/</guid><description>در زیر ما نقشه یادگیری زبان گو را براساس داده های سایت roadmap.sh قرار دادیم که در ابتدا باید طبق نقشه یادگیری زبان گو شروع کنید و سپس برای افزایش دانش خود به نقشه یادگیری بک اند نگاهی بندازید.</description></item><item><title>تغییرات نسخه های زبان گو</title><link>https://book.gofarsi.ir/changes-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/changes-log/</guid><description>2022-08-02 نسخه 1.19 بزودی تکمیل می شود
2022-03-15 نسخه 1.18 بزودی تکمیل می شود
2021-08-16 نسخه 1.17 بزودی تکمیل می شود
2021-02-16 نسخه 1.16 بزودی تکمیل می شود
2020-08-11 نسخه 1.15 بزودی تکمیل می شود
2020-02-25 نسخه 1.14 بزودی تکمیل می شود
2019-09-03 نسخه 1.13 بزودی تکمیل می شود
2019-02-25 نسخه 1.12 بزودی تکمیل می شود
2018-08-24 نسخه 1.11 بزودی تکمیل می شود
2018-02-16 نسخه 1.10 بزودی تکمیل می شود</description></item><item><title>1.1 ساختار کد گو</title><link>https://book.gofarsi.ir/chapter-1/structure-of-go-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/structure-of-go-code/</guid><description>همانطور که در تاریخچه زبان گو گفتیم, زبان گو سینتکس خیلی تمیز و ساده ای دارد که به راحتی می توانید کدهای زبان گو را بخوانید. در ادامه ما سعی می کنیم با مثال های ساده شما را با ساختار کد زبان گو آشنا کنیم.
به نقل از تاریخچه سینتکس زبان گو به گونه ای طراحی شده که خیلی ساده و تمیز می باشد و این باعث می شود خیلی سریع زبان گو را یاد بگیرید و از همه مهم تر توسعه پروژه های مقیاس پذیر با زبان گو به دلیل سادگی و آشکار بودن مفاهیم خیلی سریعتر صورت میگیرد.</description></item><item><title>1.2 کلید واژه و شناسه‌ها</title><link>https://book.gofarsi.ir/chapter-1/go-built-in-keywords-identifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-built-in-keywords-identifiers/</guid><description>در این بخش قصد داریم به کلید واژه و شناسه های زبان گو بپردازیم.
1.2.1 کلید واژه # زبان گو تا نسخه فعلی فقط ۲۵ تا کلید واژه دارد که به شرح زیر است:
1 2 3 4 5 1 break default func interface select 2 case defer go map struct 3 chan else goto package switch 4 const fallthrough if range type 5 continue for import return var کلمات کلیدی فوق به ۴ دسته تقسیم می‌شوند که به شرح زیر می‌باشد:</description></item><item><title>1.3 تایپ های پایه</title><link>https://book.gofarsi.ir/chapter-1/go-basic-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-basic-types/</guid><description>1.3.1 تایپ چیست؟ # یک تایپ مشخص کننده نوع داده است، که به کامپایلر می‌گوید قرار است چه نوع داده ای داخل یک متغییر ذخیره گردد. زبان ها انواع تایپ های مختلفی به صورت پیشفرض دارند که می‌توان از آن‌ها داخل برنامه خود استفاده کرد. ما می‌توانیم تایپ ها را به دو دسته کلی تعریف کنیم.
1.3.1.1 تایپ ایستا (Static Type) # زبانی مثل زبان گو یک زبان تایپ ایستا است، یعنی وقتی ما یک داده ای از نوع عددی داخل یک متغیر تعریف می‌کنیم داخل همان متغیر امکان اضافه کردن داده ای غیر داده عددی وجود ندارد.</description></item><item><title>1.4 عملگرها</title><link>https://book.gofarsi.ir/chapter-1/go-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-operators/</guid><description>زبان گو هم مثل سایر زبان ها دارای یکسری عملگرها مانند: عملگرهای حسابی, عملگرهای مقایسه ای, عملگرهای منطقی و عملگرهای بیتی می باشد.
1.4.1 عملگرهای حسابی # زبان گو دارای ۵ تا عملگر حسابی می باشد که به ترتیب :
عملگر نام + جمع - تفریق * ضرب / تقسیم % باقی مانده این ۵ تا عملگر اغلب به ترتیب مجموع, تفاوت, حاصلضرب و ضریب نیز نامیده می شوند.
1 a := 1 2 b := 2 3 4 c := a + b // 3 5 d := a - b // -1 6 e := a * b // 2 7 f := a / b // 0 8 g := a % b // 1 در کد نمونه بالا ما := که متغیر کوتاه است استفاده کردیم که در بhttps://book.</description></item><item><title>1.5 متغیرها و constant</title><link>https://book.gofarsi.ir/chapter-1/go-variables-and-consts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-variables-and-consts/</guid><description>1.5.1 متغیر (Variable) # در برنامه‌نویسی رایانه، یک متغیر یک مکان در حافظه (آدرس حافظه) است که دارای یک نام نمادین با عنوان می‌باشد و می‌تواند حاوی اطلاعات یا یک مقدار معلوم یا مجهول که به آن ارزش یا مقدار گفته می‌شود باشد. به زبان دیگر، متغیر در برنامه‌نویسی به فضایی که برای ذخیره داده‌ها کنار گذاشته شده‌است می‌گویند (به نقل از سایت ویکی پدیا)
تعریف یک متغیر رشته # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5) 6 7func main() { 8 var s string = &amp;#34;Hello World&amp;#34; 9 fmt.</description></item><item><title>1.6 مقادیر صفر تایپ ها (zero values)</title><link>https://book.gofarsi.ir/chapter-1/go-zero-values/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-zero-values/</guid><description>در زیر لیست تمامی تایپ ها با مقادیر صفرشان قرار دادیم :
تایپ مقدار پیش فرض یا مقدار صفر int 0 int8 0 int16 0 int32 0 int64 0 uint 0 uint8 0 uint16 0 uint32 0 uint64 0 uintptr 0 float32 0 float64 0 complex64 0+0i complex128 0+0i bool false string &amp;quot;&amp;quot; interface nil slice nil channel nil map nil pointer nil function nil struct براساس مقدار پیش فرض فیلدها</description></item><item><title>1.7 تابع (function)</title><link>https://book.gofarsi.ir/chapter-1/go-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-function/</guid><description>1.7.1 تابع چیست؟ # در برنامه‌نویسی، تابع به تکه کدهایی سازمان یافته گفته می شود که برای انجام عملی خاص استفاده می شوند. به کمک توابع می توانیم تکه کدهارو از یکدیگر جدا کنیم و از تکرار کدهای تکراری جلوگیری کنیم و به برنامه مون نظم بیشتری بدیم.
همانند شکل زیر تابع مانند یک جعبه (یا قطعه کد) می باشد. که یک مقدار ورودی گرفته و روی آن پردازش هایی انجام می دهد و یک خروجی تولید می کند.</description></item><item><title>1.8 آرایه و slice</title><link>https://book.gofarsi.ir/chapter-1/go-array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-array/</guid><description>آرایه و slice دو نوع تایپ با یک وجه اشتراک در زبان گو می باشند ولی این دو نوع تایپ یکسری تفاوت هایی با هم دارند که در ادامه به این دو تایپ می پردازیم.
1.8.1 تعریف آرایه # آرایه یکی از عمومی ترین تایپ ها در زبان های برنامه نویسی می باشد که برای نگه داری گروهی مقادیر از یک نوع تایپ استفاده می شود. برای دسترسی به هرکدام از مقادیر درون آرایه باید از اندیس استفاده کرد.</description></item><item><title>1.9 حلقه ها (for)</title><link>https://book.gofarsi.ir/chapter-1/go-for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-for/</guid><description>1.9.1 حلقه # حلقه‌ها را در زبان گو به ساده‌ترین شکل ممکن و فقط با استفاده از کلید واژه for و در مدل‌های مختلف (سه‌بخشی, بی نهایت, foreach و &amp;hellip;) می‌توان پیاده‌سازی کرد.
1.9.2 حلقه سه بخشی # این نمونه از حلقه‌ها که متداول‌ترین نوع حلقه است با استفاده از سه‌بخش:
مقداردهی شرط شمارنده ایجاد می‌شوند.
1for initialization ; condition ; counter { 2 //loop codes 3} در کد زیر نمونه‌ای از این حلقه‌ها قابل مشاهده و اجرا است.</description></item><item><title>1.10 نقشه map</title><link>https://book.gofarsi.ir/chapter-1/go-map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-map/</guid><description>1.10.1 مقدمه # نقشه ، یک نوع ساختار داده است. نقشه (ها) جهت جمع‌آوری و نگهداری مجموعه‌ای از داده‌ها استفاده می‌گردند. نقشه ، از نوع داده‌های انجمنی (هش) بصورت «کلید-مقدار» است. نقشه ، مجموعه‌ای از داده‌ها بصورت جفت‌‌های مرتب‌نشده است. 1.10.2 تعریف # یک مپ شبیه به فرمت زیر است:
map[KeyType]ValueType کلمه کلیدی map و بعد نوع کلید و در آخر هم نوع مقدار تعریف می‌شود.
کلید: برای اشاره به یک مقدار ذخیره شده، به یک نام‌گذاری برای آن مقدار نیاز داریم و این یعنی «کلید» آن مقدار.</description></item><item><title>1.11 شرط (if, switch)</title><link>https://book.gofarsi.ir/chapter-1/go-if-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-if-switch/</guid><description>1.11.1 شرط (if-else) # زبان گو همانند ساز سایر زبان ها دارای شرط می باشد که خیلی ساده می توانید از آن استفاده کنید و در زیر ما فرمت استاندارد شرط در زبان گو را قرار دادیم :
1if condition { 2 //Do something 3} else if condition { 4 //Do something 5} else { 6 //Do something 7} در بالا condition عبارتی است که قرار است وضعیت شرط را مشخص کند و در صورت true شدن شرط بر قرار می شود و در صورت برقرار نشدن شرط اول وارد else if می شود و مجدد یک condition دیگری را چک می کنیم که وضعیتش true می شود یا خیر و در نهایت منتهی می شود به else.</description></item><item><title>1.12 اضافه کردن پکیج در کد (package)</title><link>https://book.gofarsi.ir/chapter-1/go-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-package/</guid><description>زبان برنامه نویسی گو به شکلی طراحی شده است تا بتوانیم شیو‌ه های خوب مهندسی نرم افزار را به خوبی و ساده پیاده سازی کنیم. یکی از الگوهای مهم برای ارتقای کیفیت یک نرم افزار استفاده از DRY principle است. کلمه DRY مخفف Don’t Repeat Yourself است. که به صورت خیلی ساده یعنی کدی که خواهید نوشت را دوبار تکرار نکنید. تا جایی که امکان دارد باید از کدهای قبلی که نوشته اید بتوانید استفاده کنید.</description></item><item><title>1.13 defer, panic, recovery</title><link>https://book.gofarsi.ir/chapter-1/go-defer-panic-recovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-defer-panic-recovery/</guid><description>1.13.1 تعویق (defer) # کلمه کلیدی defer یکی از کاربردی ترین امکانات زبان گو می باشد که شما می توانید اجرای یک تابع را به تعویق بندازید و در آخر تابع فعلی اجرا کنید. عموما defer برای توابعی کاربرد دارد که قصد دارد پاکسازی یا بستن عملیات های صورت گرفته را انجام دهد نظیر توابع Close در برخی از جاها.
1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5) 6 7func main() { 8 defer fmt.</description></item><item><title>1.14 لیست تایپ ها و توابع Builtin</title><link>https://book.gofarsi.ir/chapter-1/go-builtins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-builtins/</guid><description>در زیر لیست تایپ ها و توابع Builtin تا نسخه ۱.۱۹ را با توضیحات قرار دادیم.
1// bool is the set of boolean values, true and false. 2type bool bool 3 4// true and false are the two untyped boolean values. 5const ( 6 true = 0 == 0 // Untyped bool. 7 false = 0 != 0 // Untyped bool. 8) 9 10// uint8 is the set of all unsigned 8-bit integers.</description></item><item><title>1.15 قالب بندی رشته ها</title><link>https://book.gofarsi.ir/chapter-1/go-string-formatting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-1/go-string-formatting/</guid><description>در زبان گو مانند سایر زبان ها یکسری عناوین برای قالب بندی رشته وجود دارد که برخی از این عناوین مشترک بین همه زبان ها می باشد و برخی مختص زبان گو است.
1.15.1 قالب بندی با تابع Printf و Sprintf # زمانیکه شما از تابع Printf یا Sprintf استفاده می کنید می توانید رشته خروجی را با استفاده از پارامترهای بعد از رشته قالب بندی کنید و در نهایت بصورت یک رشته نمایش دهید.</description></item><item><title>2.1 اشاره گر (Pointer)</title><link>https://book.gofarsi.ir/chapter-2/pointer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-2/pointer/</guid><description>اشاره گر در واقع متغیری است که آدرس حافظه متغیر دیگری را نگه می دارد.
1var ex *T در بالا ما یک متغیری تعریف کردیم که مقدار داخل آدرس حافظه متغیری T را با استفاده از * را نگه می دارد.
در اشاره گر ۲ تا اپراتور داریم که هر کدام از این ها را در کنار یک متغیر بزاریم به آدرس حافظه یا مقدار داخل خانه حافظه متغیر قبلی دسترسی پیدا می کنیم :</description></item><item><title>2.2 ساختار (struct)</title><link>https://book.gofarsi.ir/chapter-2/struct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-2/struct/</guid><description>در زبان گو ساختار به کالکشنی از فیلدها با تایپ های مختلف می گویند. شما با استفاده ساختار می توانید ساختار یا مدل کلی از بدنه پروژه خود را بنویسید. برای نمونه ما یک ساختار employee مثال زدیم تا با ساختار آشنا شوید.
1type employee struct { 2 name string 3 age int 4 salary int 5} نکته: ساختار می‌تواند بصورت خالی نیز جهت برخی اهداف ایجاد گردد.
1type sample struct {} متدها روی ساختار</description></item><item><title>2.3 متد (Method)</title><link>https://book.gofarsi.ir/chapter-2/method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-2/method/</guid><description>متد در واقع یک تابع گیرنده (reciver) است که به واسطه یک تایپ در دسترس خواهد, تا زمانیکه شما یک متغیر از نوع تایپی که دارای متد می باشد را راه اندازی نکنید به متدهایش دسترسی نخواهید داشت.
اکثرا متد را یکی از عناوین شی گرایی در زبان گو میشناسند که مزایای خوبی دارد بخصوص اگر متدها برای تایپ struct تعریف شوند شما می توانید برای هریک از فیلدهای ساختارتان توابع بخصوصی در قالب متد بنویسید .</description></item><item><title>2.4 اینترفیس (Interface)</title><link>https://book.gofarsi.ir/chapter-2/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-2/interface/</guid><description>اینترفیس در زبان گو مجموعه ای از متدها می باشد. این مجموعه متدها با توجه به ورودی و خروجی که دارند دارای رفتارهای خاصی هستند. زمانیکه شما یک اینترفیس به همراه یکسری از متدها تعریف می کنید باید در جایی این متدها را پیاده سازی کنید.
اینترفیس ها به شما اجازه می دهد تا از Duck typing استفاده کنید. حالا این duck typing چیست؟
duck typing روشی در برنامه نویسی کامپیوتری است که به شما امکان می دهد تست اردک را انجام دهید، جایی که ما نوع را بررسی نمی کنیم، بلکه تنها وجود برخی ویژگی ها یا روش ها را بررسی می کنیم.</description></item><item><title>2.5 جاسازی تایپ (type embedding)</title><link>https://book.gofarsi.ir/chapter-2/type-embedding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-2/type-embedding/</guid><description>در زبان گو برای ساختار و اینترفیس امکان جاسازی تایپ وجود دارد. یعنی شما می توانید یک ساختار یا یک اینترفیس را داخل ساختار دیگر جاسازی کنید و یا داخل اینترفیس یک اینترفیس دیگر را جاسازی کنید.
1 2type animal interface { 3 breathe() 4 walk() 5} 6 7type human interface { 8 animal 9 speak() 10} 11 12type base struct { 13 num int 14} 15 16type container struct { 17 human 18 base 19 str string 20} در بالا ما اینترفیس animal را در اینترفیس human جاسازی کردیم و در ادامه داخل ساختار container اینترفیس human و ساختار base را جاسازی کردیم.</description></item><item><title>2.6 مدیریت خطاها</title><link>https://book.gofarsi.ir/chapter-2/error-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-2/error-handling/</guid><description>در این بخش قصد به مقوله مدیریت خطاها در زبان گو بپردازیم و اینکه چطور می توانید خیلی ساده خطاها را مدیریت کنید. مدیریت خطا در زبان گو با سایر زبان ها متفاوت هست و شما با چیزی به نام try-catch یا try-except سروکار ندارید.
مدیریت خطاها در زبان گو به دو روش صورت می گیرد :
با استفاده از پیاده سازی اینترفیس error که یک روش مرسوم جهت مدیریت و نمایش خطا می باشد.</description></item><item><title>2.7 فرق casting با conversion</title><link>https://book.gofarsi.ir/chapter-2/casting-vs-conversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-2/casting-vs-conversion/</guid><description>2.7.1 conversion # conversion زمانی اتفاق می افتد که ما مقدار یک داده را به تایپ دیگری اختصاص دهیم.
و اگر زبان هایی که Static Type هستند از این مقوله بطور ضمنی پشتیبانی می کنند ولی در زبان گو کمی متفاوت است. اگر شما بخواهید conversion انجام دهید باید بصورت دستی اینکار را انجام دهید. چون کامپایلر گو روی برخی از عناوین بطور صریح در نظر میگیرد.
2.7.2 type casting # در زبان گو چیزی به نام type casting بطور کلی وجود ندارد.</description></item><item><title>3.1 آشنایی با همزمانی</title><link>https://book.gofarsi.ir/chapter-3/go-concurrency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/go-concurrency/</guid><description>نرم‌افزارهای بزرگ به منظور توسعه راحت‌تر و قابلیت نگهداری بیشتر و همچنین پرهیز از تکرار از ده‌ها زیر برنامه کوچک‌تر تشکیل می‌شوند که به آنها توابع می‌گوییم و تمامی این زیربرنامه‌های کوچک در کنار هم اما به صورت مستقل عملکرد کلی برنامه بزرگتر را شکل می‌دهند. به عنوان مثال یک وب سرور درخواست‌های ارسال شده از سمت مرورگرها را مدیریت می کند و در پاسخ صفحات وب HTML را آماده کرده و ارائه می‌دهد و هر در خواست از طریق فراخوانی چندین برنامه کوچک رسیدگی می شود تا نتیجه را به مرورگر برگردانده شود.</description></item><item><title>3.2 گوروتین (goroutine)</title><link>https://book.gofarsi.ir/chapter-3/goroutine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/goroutine/</guid><description>گوروتین ها را می توان به عنوان یک thread سبک در نظر گرفت که بصورت مستقلانه می تواند همزمان با سایر گوروتین های دیگر کارها را انجام دهد. و همچنین گوروتین ها می توانند به واسطه کانال داده ها را بین هم اشتراک گذاری و منتقل کنند.
حداکثر اندازه stack یک گوروتین در زبان گو ۱ گیگابایت می باشد.
1var maxstacksize uintptr = 1 &amp;lt;&amp;lt; 20 // enough until runtime.main sets it for real 2 3 if newsize &amp;gt; maxstacksize || newsize &amp;gt; maxstackceiling { 4 if maxstacksize &amp;lt; maxstackceiling { 5 print(&amp;#34;runtime: goroutine stack exceeds &amp;#34;, maxstacksize, &amp;#34;-byte limit\n&amp;#34;) 6 } else { 7 print(&amp;#34;runtime: goroutine stack exceeds &amp;#34;, maxstackceiling, &amp;#34;-byte limit\n&amp;#34;) 8 } 9 print(&amp;#34;runtime: sp=&amp;#34;, hex(sp), &amp;#34; stack=[&amp;#34;, hex(gp.</description></item><item><title>3.3 پکیج sync</title><link>https://book.gofarsi.ir/chapter-3/go-sync-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/go-sync-package/</guid><description>پکیج sync یکی از کاربردی ترین پکیج ها در زمینه همزمانی می باشد و یکسری تایپ و توابع برایهمگام سازی و کنترل دسترسی همزمان به داده مشترک ارائه می دهد. که پرکاربردترین آن ها :
Mutex : با استفاده از این می توانید آن بخش از داده ای که گوروتین ها بطور همزمان قصد دارند دسترسی داشته باشند را می توانید قفل کنید. RWMutex : با استفاده از این می توانید به چندین گوروتین اجازه خواندن دهید ولی فقط یک گوروتین می تواند بنویسد در یک زمان.</description></item><item><title>3.4 پکیج atomic</title><link>https://book.gofarsi.ir/chapter-3/go-atomic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/go-atomic/</guid><description>پکیج atomic یک حافظه atomic سطح پایین برای پیاده سازی الگوریتم های همگام سازی شده است. از مواردی که خیلی قابل اهمیت است با این پکیج شما می توانید یکسری الگوهای همگام سازی را پیاده سازی کنید. سعی کنید با دقت بیشتری از این پکیج استفاده کنید چون کارکردش خارج از safe memory هست.
به مثال زیر توجه کنید :
1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;sync&amp;#34; 6 &amp;#34;sync/atomic&amp;#34; 7) 8 9type Cache struct { 10 mu sync.</description></item><item><title>3.5 آموزش مقابله با data race</title><link>https://book.gofarsi.ir/chapter-3/goroutine-data-race/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/goroutine-data-race/</guid><description>معمولا تو بحث همزمانی یکی از اتفاقاتی که خیلی ممکن است رخ دهد بحث data race است و data race زمانی رخ می دهد که ۲ یا چند گوروتین قصد دارند به یک آدرس حافظه در یک زمان دسترسی داشته باشند. حال اگر ما جلوی data race را نگیریم ممکن است تغییرات نادرست برروی مقادیر داخل خانه حافظه صورت گیرد.
راه هایی برای مقابله با data race وجود دارد که به شرح زیر است :</description></item><item><title>3.6 کانال (channel)</title><link>https://book.gofarsi.ir/chapter-3/go-channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/go-channel/</guid><description>کانال یک نوع تایپ است که داده از نوع خاصی را نگه داری میکند و امکان برقراری ارتباط و همگام سازی داده بین گوروتین ها را فراهم می کند. شما می توانید کانال ها را به عنوان خط لوله های در نظر بگیرید که این خط لوله ها به گوروتین ها متصل می شود و باعث برقراری ارتباط بین گوروتین ها می شود. این ارتباط بین گوروتین ها به هیچ قفل صریحی نیاز ندارد (منظورم mutex و &amp;hellip;) چون کانال ها بصورت داخلی قفل ها را مدیریت میکند و در زمان های مناسب و مشخص Lock و UnLock می کند.</description></item><item><title>3.7 آموزش استفاده از select</title><link>https://book.gofarsi.ir/chapter-3/go-select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/go-select/</guid><description>در زبان گو select همانند switch می باشد که دارای case و default هستش اما یک فرق کلی دارد که به عملکردش برمیگردد. case های select برای عملیات ارسال و دریافت از کانال منتظر می ماند. در کل شما با استفاده از select می توانید از کانال های مختلف اطلاعات ارسال و دریافت کنید و پس از آن برروی آن اطلاعات عملیات انجام دهید.
select تا زمانی که یکی از case ها آماده شود بلاک می شود.</description></item><item><title>3.8 پکیج context</title><link>https://book.gofarsi.ir/chapter-3/go-context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/go-context/</guid><description>پکیج context که یک پکیج built-in هست یکی از پرکاربرد ترین پکیج ها می باشد. که اگر شما حتی نخواسته باشید سمت این پکیج بروید به مرور زمان وقتی که جلوتر بروید با این پکیج رو به رو خواهید شد و مجبور خواهید بود این پکیج را یاد بگیرید.
این پکیج چندان بزرگ نیست شاید بتوانید توابع و چیزهایی که داخلش هست را زود یادبگیرید اما دقت کنید یک روزی این پکیج میشه بنیادی ترین قسمت از کدهایتان که باهاش کار میکنید.</description></item><item><title>3.9 تکنیک های همزمانی</title><link>https://book.gofarsi.ir/chapter-3/go-concurrency-teqniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/go-concurrency-teqniques/</guid><description>3.9.1 ارسال سیگنال انجام شدن با کانال ساختار # شما می توانید با استفاده از کانال struct یک سیگنال تکمیل شدن انجام یک کار را بفرستید.
1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;time&amp;#34; 6) 7 8func task1(done chan struct{}) { 9 // Do some work here 10 fmt.Println(&amp;#34;doing task 1&amp;#34;) 11 12 time.Sleep(2 * time.Second) 13 14 fmt.Println(&amp;#34;task 1 has been completed&amp;#34;) 15 done &amp;lt;- struct{}{} 16} 17 18func task2(done &amp;lt;-chan struct{}) { 19 select { 20 case &amp;lt;-done: 21 // Do some work here 22 fmt.</description></item><item><title>3.10 الگو های همزمانی</title><link>https://book.gofarsi.ir/chapter-3/go-concurrency-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-3/go-concurrency-patterns/</guid><description>الگو های همزمانی را در فصل ۹ در کنار سایر الگوهای طراحی قرار دادیم یک مرجع کامل از الگوهای طراحی برای زبان گو داشته باشیم. در این بخش فقط ما خلاصه توضیحی در خصوص الگوها قرار دادیم و شما را ارجاع می دهیم به صفحه الگو :
عنوان توضیحات وضعیت Wait For Result با استفاده از الگو Wait For Result می توانید یک عملیاتی را بصورت همزمانی انجام دهید و سپس منتظر نتیجه عملیات صورت گرفته بمانید.</description></item><item><title>4.1 آموزش Build پروژه</title><link>https://book.gofarsi.ir/chapter-4/build-go-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/build-go-file/</guid><description>برای build یک پروژه شما باید از کامند go build استفاده کنید که این کامند دارای یکسری سوییچ می باشد که در زیر ما معرفی خواهیم کرد.
4.1.1 نحوه build یک فایل گو # معمولا شما باید برای build فایلی که دارای package main هست را برای build استفاده کنید مانند مثال زیر :
1$ go build main,go پس از build در محل همان فایل یک فایل با نام main ایجاد می شود.</description></item><item><title>4.2 آموزش کار با Debugging</title><link>https://book.gofarsi.ir/chapter-4/debugging-go-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/debugging-go-code/</guid><description>برای بحث debugging در زبان گو روش های مختلفی وجود دارد که محبوبترین روش ها به شرح زیر می باشد :
با استفاده پکیج fmt : شما با استفاده از تابع fmt.Println می توانید مقادیر برخی از متغیرها را چاپ کنید و یکی از روش های ساده برای بحث دیباگ هستش. با استفاده از پکیج log : یکی از کاربردی ترین روش ها بحث لاگ کردن هستش که شما می توانید هر بخش از کدهای خود را لاگ کنید و بصورت زنده در console یا داخل فایل ببینید و از همه مهمتر شما می توانید لاگ های خود را سطح بندی کنید تا بهتر بتوانید دیباگ کنید.</description></item><item><title>4.3 آموزش کار با go mod</title><link>https://book.gofarsi.ir/chapter-4/go-mod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/go-mod/</guid><description>آموزش کار با go mod&amp;hellip;</description></item><item><title>4.4 آموزش کار با workspace</title><link>https://book.gofarsi.ir/chapter-4/workspace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/workspace/</guid><description>آموزش کار با workspace&amp;hellip;</description></item><item><title>4.5 آموزش کار با Vendor</title><link>https://book.gofarsi.ir/chapter-4/vendor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/vendor/</guid><description>آموزش کار با workspace&amp;hellip;</description></item><item><title>4.6 آموزش نوشتن برنامه command line</title><link>https://book.gofarsi.ir/chapter-4/command-line-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/command-line-go/</guid><description>آموزش نوشتن برنامه command line&amp;hellip;</description></item><item><title>4.7 آموزش کار با فایل</title><link>https://book.gofarsi.ir/chapter-4/work-with-file-in-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/work-with-file-in-go/</guid><description>آموزش کار با فایل&amp;hellip;</description></item><item><title>4.8 آموزش کار با json</title><link>https://book.gofarsi.ir/chapter-4/work-with-json-file-in-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/work-with-json-file-in-go/</guid><description>آموزش کار با json&amp;hellip;</description></item><item><title>4.9 آموزش کار با toml</title><link>https://book.gofarsi.ir/chapter-4/work-with-toml-file-in-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/work-with-toml-file-in-go/</guid><description>آموزش کار با toml&amp;hellip;</description></item><item><title>4.10 آموزش کار با yaml</title><link>https://book.gofarsi.ir/chapter-4/work-with-yaml-file-in-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/work-with-yaml-file-in-go/</guid><description>آموزش کار با yaml&amp;hellip;</description></item><item><title>4.11 آموزش کار با csv</title><link>https://book.gofarsi.ir/chapter-4/work-with-csv-file-in-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/work-with-csv-file-in-go/</guid><description>آموزش کار با csv&amp;hellip;</description></item><item><title>4.12 آموزش کار با ini</title><link>https://book.gofarsi.ir/chapter-4/work-with-ini-file-in-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/work-with-ini-file-in-go/</guid><description>آموزش کار با ini&amp;hellip;</description></item><item><title>4.13 آموزش کار با environment variable</title><link>https://book.gofarsi.ir/chapter-4/work-with-environment-variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/work-with-environment-variable/</guid><description>آموزش کار با environment variable&amp;hellip;</description></item><item><title>4.14 آموزش کار با regexp</title><link>https://book.gofarsi.ir/chapter-4/go-regular-expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/go-regular-expressions/</guid><description>مواقعی در کد نویسی دارید که نیاز هست تا یک عبارتی مثل شماره تلفن،کد پستی و یا شماره پاسپورت وارد شده را بصورت قاعده مند بررسی کنید به عبارتی کاربر نتواند برای فیلد شماره تلفن، کاراکتر غیر عددی وارد کند. در این مواقع بهتر است داده وارد شده بصورت قاعده مند بررسی شود. برای درک بهتر موضوع به رشته وارد شده توسط کاربر که می تواند سهوا باشد دقت کنید</description></item><item><title>4.15 آموزش reflection</title><link>https://book.gofarsi.ir/chapter-4/go-reflection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/go-reflection/</guid><description>آموزش reflection&amp;hellip;</description></item><item><title>4.16 آموزش generator</title><link>https://book.gofarsi.ir/chapter-4/go-generator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/go-generator/</guid><description>آموزش generator&amp;hellip;</description></item><item><title>4.17 آموزش stringer</title><link>https://book.gofarsi.ir/chapter-4/go-stringer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/go-stringer/</guid><description>آموزش stringer&amp;hellip;</description></item><item><title>4.18 تکنیک های کدنویسی زبان گو</title><link>https://book.gofarsi.ir/chapter-4/effective-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/effective-go/</guid><description>آموزش تکنیک های کدنویسی&amp;hellip;</description></item><item><title>4.19 اصول کامنت نویسی</title><link>https://book.gofarsi.ir/chapter-4/go-commentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/go-commentry/</guid><description>اصول کامنت نویسی در زبان گو</description></item><item><title>4.20 قوانین کدنویسی در گو</title><link>https://book.gofarsi.ir/chapter-4/go-code-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/go-code-rules/</guid><description>قوانین کدنویسی در گو&amp;hellip;</description></item><item><title>4.21 زباله جمع کن (garbage collector)</title><link>https://book.gofarsi.ir/chapter-4/go-garbage-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/go-garbage-collector/</guid><description>زباله جمع کن (garbage collector)&amp;hellip;</description></item><item><title>4.22.1 کپسوله سازی (Encapsulation)</title><link>https://book.gofarsi.ir/chapter-4/oop/go-encapsulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-encapsulation/</guid><description>کپسوله سازی</description></item><item><title>4.22.2 ارث بری</title><link>https://book.gofarsi.ir/chapter-4/oop/go-inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-inheritance/</guid><description>ارث بری</description></item><item><title>4.22.3 پلی مورفیسم (Polymorphism)</title><link>https://book.gofarsi.ir/chapter-4/oop/go-polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-polymorphism/</guid><description>پلی مورفیسم</description></item><item><title>4.22.4 overriding</title><link>https://book.gofarsi.ir/chapter-4/oop/go-overriding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-overriding/</guid><description>نحوه overriding</description></item><item><title>4.22.5 abstraction</title><link>https://book.gofarsi.ir/chapter-4/oop/go-abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-4/oop/go-abstraction/</guid><description>نحوه abstraction</description></item><item><title>5.1 کتابخانه http سمت سرور مقدماتی</title><link>https://book.gofarsi.ir/chapter-5/go-http-server-begginer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-5/go-http-server-begginer/</guid><description>آموزش کتابخانه http سمت سرور مقدماتی&amp;hellip;</description></item><item><title>5.2 کتابخانه http سمت سرور پیشرفته</title><link>https://book.gofarsi.ir/chapter-5/go-http-server-advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-5/go-http-server-advanced/</guid><description>آموزش کتابخانه http سمت سرور پیشرفته&amp;hellip;</description></item><item><title>5.3 کتابخانه http سمت کلاینت مقدماتی</title><link>https://book.gofarsi.ir/chapter-5/go-http-client-begginer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-5/go-http-client-begginer/</guid><description>آموزش کتابخانه http سمت کلاینت مقدماتی&amp;hellip;</description></item><item><title>5.4 کتابخانه http سمت کلاینت پیشرفته</title><link>https://book.gofarsi.ir/chapter-5/go-http-client-advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-5/go-http-client-advanced/</guid><description>آموزش کتابخانه http سمت کلاینت پیشرفته&amp;hellip;</description></item><item><title>9.1.1 الگو Singleton</title><link>https://book.gofarsi.ir/chapter-9/creational-patterns/go-singleton-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/creational-patterns/go-singleton-pattern/</guid><description>الگو Singleton&amp;hellip;</description></item><item><title>9.1.2 الگو Factory Method</title><link>https://book.gofarsi.ir/chapter-9/creational-patterns/go-factory-method-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/creational-patterns/go-factory-method-pattern/</guid><description>الگو Factory Method&amp;hellip;</description></item><item><title>9.1.3 الگو Prototype</title><link>https://book.gofarsi.ir/chapter-9/creational-patterns/go-prototype-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/creational-patterns/go-prototype-pattern/</guid><description>الگو Prototype&amp;hellip;</description></item><item><title>9.1.4 الگو Abstract Factory</title><link>https://book.gofarsi.ir/chapter-9/creational-patterns/go-abstract-factory-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/creational-patterns/go-abstract-factory-pattern/</guid><description>الگو Abstract Factory&amp;hellip;</description></item><item><title>9.1.6 الگو Builder</title><link>https://book.gofarsi.ir/chapter-9/creational-patterns/go-builder-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/creational-patterns/go-builder-pattern/</guid><description>الگو Builder&amp;hellip;</description></item><item><title>9.1.7 الگو Object Pool</title><link>https://book.gofarsi.ir/chapter-9/creational-patterns/go-object-pool-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/creational-patterns/go-object-pool-pattern/</guid><description>الگو Object Pool&amp;hellip;</description></item><item><title>9.2.1 الگو Adaptor</title><link>https://book.gofarsi.ir/chapter-9/structural-patterns/go-adaptor-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/structural-patterns/go-adaptor-pattern/</guid><description>الگو Adaptor&amp;hellip;</description></item><item><title>9.2.2 الگو Bridge</title><link>https://book.gofarsi.ir/chapter-9/structural-patterns/go-bridge-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/structural-patterns/go-bridge-pattern/</guid><description>الگو Bridge&amp;hellip;</description></item><item><title>9.2.3 الگو Composite</title><link>https://book.gofarsi.ir/chapter-9/structural-patterns/go-composite-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/structural-patterns/go-composite-pattern/</guid><description>الگو Composite&amp;hellip;</description></item><item><title>9.2.1 الگو Decorator</title><link>https://book.gofarsi.ir/chapter-9/structural-patterns/go-decorator-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/structural-patterns/go-decorator-pattern/</guid><description>الگو Decorator&amp;hellip;</description></item><item><title>9.2.5 الگو Facade</title><link>https://book.gofarsi.ir/chapter-9/structural-patterns/go-facade-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/structural-patterns/go-facade-pattern/</guid><description>الگو Facade&amp;hellip;</description></item><item><title>9.2.6 الگو Flyweight</title><link>https://book.gofarsi.ir/chapter-9/structural-patterns/go-flyweight-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/structural-patterns/go-flyweight-pattern/</guid><description>الگو Flyweight&amp;hellip;</description></item><item><title>9.2.7 الگو Proxy</title><link>https://book.gofarsi.ir/chapter-9/structural-patterns/go-proxy-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/structural-patterns/go-proxy-pattern/</guid><description>الگو Proxy&amp;hellip;</description></item><item><title>9.3.1 الگو Chain Of Responsibility</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-chain-of-responsibility-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-chain-of-responsibility-pattern/</guid><description>الگو Chain Of Responsibility&amp;hellip;</description></item><item><title>9.3.2 الگو Command</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-command-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-command-pattern/</guid><description>الگو Command&amp;hellip;</description></item><item><title>9.3.3 الگو Iterator</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-iterator-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-iterator-pattern/</guid><description>الگو Iterator&amp;hellip;</description></item><item><title>9.3.4 الگو Mediator</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-mediator-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-mediator-pattern/</guid><description>الگو Mediator&amp;hellip;</description></item><item><title>9.3.5 الگو Memento</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-memento-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-memento-pattern/</guid><description>الگو Memento&amp;hellip;</description></item><item><title>9.3.6 الگو Observer</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-observer-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-observer-pattern/</guid><description>الگو Observer&amp;hellip;</description></item><item><title>9.3.7 الگو State</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-state-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-state-pattern/</guid><description>الگو State&amp;hellip;</description></item><item><title>9.3.8 الگو Strategy</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-strategy-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-strategy-pattern/</guid><description>الگو Strategy&amp;hellip;</description></item><item><title>9.3.9 الگو Template Method</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-template-method-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-template-method-pattern/</guid><description>الگو Template Method&amp;hellip;</description></item><item><title>9.3.10 الگو Visitor</title><link>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-visitor-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/behavioral-patterns/go-visitor-pattern/</guid><description>الگو Visitor&amp;hellip;</description></item><item><title>9.4.1 الگو Wait For Result</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-wait-for-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-wait-for-result/</guid><description>9.4.1.1 توضیحات # با استفاده از الگو Wait For Result می توانید یک عملیاتی را بصورت همزمانی انجام دهید و سپس منتظر نتیجه عملیات صورت گرفته بمانید. برای اینکار از کانال استفاده می شود.
9.4.1.2 دیاگرام # 9.4.1.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;time&amp;#34; 6) 7 8func longRunningTask(c chan int) { 9 time.Sleep(3 * time.Second) 10 c &amp;lt;- 42 11} 12 13func main() { 14 c := make(chan int) 15 go longRunningTask(c) 16 17 result := &amp;lt;-c 18 fmt.</description></item><item><title>9.4.2 الگو Fan Out/In</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-fan-out-in/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-fan-out-in/</guid><description>9.4.2.1 توضیحات # الگو Fan Out/In یک تکنیک همزمانی در زبان گو می باشد که به شما اجازه می دهد چندین کار را با گوروتین همزمان انجام دهید و در نتیجه خروجی این کارها را با هم ترکیب کنید و به عنوان نتیجه نهایی دریافت کنید.
9.4.2.2 دیاگرام # 9.4.2.3 نمونه کد # فرض کنید قصد دارید یک برنامه ای بنویسید که چندین فایل بصورت موازی دانلود کنید و در نهایت محتوای این فایل را میخواهید ترکیب کنید و یک خروجی داشته باشید.</description></item><item><title>9.4.3 الگو Wait For Task</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-wait-for-task/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-wait-for-task/</guid><description>9.4.3.1 توضیحات # الگو wait for task یکی از الگوهای رایج در زبان گو می باشد و انتظار برای تکمیل یک تسک یا فرآیند استفاده می شود. یک تسک با استفاده از گوروتین اجرا می شود و پس اتمامش کار تسک از طریق کانال سیگنال انجام می فرستد.
همچنین می توانید شما یک کانال ایجاد کنید منتظر بمانید تسک انجام شود و دیتا مورد نظر را از طریق کانال بگیرید.</description></item><item><title>9.4.4 الگو Pooling</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-pooling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-pooling/</guid><description>9.4.4.1 توضیحات # شما با استفاده از الگو pooling می توانید برای استفاده مجدد یا مدیریت تعداد ثابتی از منابع مانند : کانکشن های دیتابیس یا مجموعه ای از گوروتین های کارگر استفاده کنید. از کانال برای برقراری ارتباط بین مجموع منابع استفاده می شود.
9.4.4.2 دیاگرام # 9.4.4.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5) 6 7func main() { 8 jobs := make(chan int, 100) 9 results := make(chan int, 100) 10 11 // Start 3 worker goroutines 12 for w := 1; w &amp;lt;= 3; w++ { 13 go worker(w, jobs, results) 14 } 15 16 // Send 5 jobs to the worker pool 17 for j := 1; j &amp;lt;= 5; j++ { 18 jobs &amp;lt;- j 19 } 20 close(jobs) 21 22 // Collect the results 23 for a := 1; a &amp;lt;= 5; a++ { 24 fmt.</description></item><item><title>9.4.5 الگو Drop</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-drop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-drop/</guid><description>9.4.5.1 توضیحات # الگو Drop یک الگو مهم برای انجام خدمات سنگین می باشد. خدماتی که مواقعی باعث می شود حجم درخواست هایش بیش از ظرفیت موجود باشد و این درخواست ها بواسطه این الگو می تواند Drop شود. به عنوان مثال سرویس های DNS باید از این الگو استفاده کنند.
9.4.5.2 دیاگرام # 9.4.5.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5) 6 7func main() { 8 in := make(chan int, 5) 9 out := make(chan int, 5) 10 11 go func() { 12 for { 13 select { 14 case in &amp;lt;- 1: 15 default: 16 fmt.</description></item><item><title>9.4.6 الگو Cancellation</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-cancellation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-cancellation/</guid><description>9.4.6.1 توضیحات # الگو cancellation که حرکت تکنیکی هست برای ارسال سینگال به گوروتین ها استفاده می شود که باید اجرای کاری را متوقف کند و ایده اصلی این کار با استفاده بستن کانال صورت میگیرد.
9.4.6.2 دیاگرام # 9.4.6.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;time&amp;#34; 6) 7 8func main() { 9 // create cancel channel 10 cancel := make(chan struct{}) 11 12 // start goroutine 13 go func() { 14 for { 15 select { 16 case &amp;lt;-cancel: 17 fmt.</description></item><item><title>9.4.7 الگو Semaphore</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-semaphore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-semaphore/</guid><description>9.4.7.1 توضیحات # الگو Semaphore برای مدیریت کنترل دسترسی به منابع مشترک در همزمانی استفاده می شود. فرض کنید بصورت موازی ۱۰۰ درخواست HTTP سمت سرور میاد و I/O شبکه برای پردازش همزمان این ۱۰۰ درخواست درگیر میشود و به مرور عملکرد کاهش می یابد. حال اگر ما بیایم این ۱۰۰ درخواست موازی را تقسیم کنیم به ۵ دسته ۲۰ تایی که بصورت همزمانی انجام شود باعث می شود I/O شبکه کاهش یابد و عملکرد بهتری را خواهیم داشت.</description></item><item><title>9.4.8 الگو Bounded Work Pooling</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-bounded-work-pooling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-bounded-work-pooling/</guid><description>9.4.8.1 توضیحات # با استفاده از الگو Bounded Work Pooling امکان محدود سازی تعداد گوروتین ها را براساس کار مشخصی دارید و گوروتین ها را محدود به تعداد دفعات کار مشخص شده محدود می شود. این الگو برای وقت مفید است که شما می خواهید منابع را به یک کار خاص محدود کنید.
9.4.8.2 دیاگرام # 9.4.8.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;sync&amp;#34; 6) 7 8func main() { 9 // Create a channel to hold the tasks 10 tasks := make(chan int, 100) 11 12 // Create a WaitGroup to track the goroutines 13 var wg sync.</description></item><item><title>9.4.9 الگو Retry Timeout</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-retry-timeout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-retry-timeout/</guid><description>9.4.9.1 توضیحات # شما از الگو Retry Timeout برای تلاش مجدد یکسری عملیات استفاده کنید. برای اینکار شما می توانید از حلقه و تابع After در پکیج time کمک بگیرید و برای هرتلاش یک timeout مشخص کنید.
9.4.9.2 دیاگرام # 9.4.9.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;net/http&amp;#34; 6 &amp;#34;time&amp;#34; 7) 8 9func main() { 10 var resp *http.Response 11 var err error 12 timeout := time.</description></item><item><title>9.4.10 الگو Channel Cancellation</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-channel-cancellation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-channel-cancellation/</guid><description>9.4.10.1 توضیحات # از کانال ها برای ارتباط بین گوروتین ها و هماهنگ کردن اجرا استفاده می شود. حال گاهی اوقات نیاز است که ما یکسری فرآیند را داخل گوروتین لغو کنیم. در اینجا می توانیم با استفاده از کانال سیگنال لغو کردن بفرستید تا عملیات هایی که گوروتین مورد نظر انجام می داد لغو شود.
9.4.10.2 دیاگرام # 9.4.10.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5) 6 7func doWork(cancel chan bool) { 8 fmt.</description></item><item><title>9.4.11 الگو Producer-Consumer</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-producer-consumer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-producer-consumer/</guid><description>9.4.11.1 توضیحات # الگو producer-consumer یکی از کاربردی ترین الگوها در زبان گو می باشد که با استفاده از الگو می توانید بطور همزمان یکسری اطلاعات تولید کنید و بفرستید داخل کانال و این اطلاعات توسط مصرف کننده بواسطه کانال دریافت شود.
معمولا برای این الگو از یک کانال دو طرفه استفاده می شود.
9.4.11.2 دیاگرام # 9.4.11.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;math/rand&amp;#34; 6 &amp;#34;time&amp;#34; 7) 8 9func producer(ch chan&amp;lt;- int, d time.</description></item><item><title>9.4.12 الگو Monitor</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-monitor/</guid><description>9.4.12.1 توضیحات # الگوی مانیتور به گروتین‌ ها اجازه می‌دهد هنگام ورود به حالت خواب بدون مسدود کردن اجرا یا مصرف منابع، منتظر شرایط خاصی باشند.
حال برای پیاده سازی این الگو ما از ساختاری به نام Cond در پکیج sync کمک میگیریم.
به نقل از ویکی پدیا :
در برنامه‌نویسی همروند (یا همان برنامه‌نویسی موازی)، مانیتور یک ساختار همگام سازی است که به ریسمان ها این امکان را می‌دهد که هم، انحصار متقابل داشته باشند و هم، بتوانند برای یک وضعیت خاص منتظر بمانند (مسدود شوند) تا وضعیت غلط شود.</description></item><item><title>9.4.13 الگو Future</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-future/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-future/</guid><description>9.4.13.1 توضیحات # در زبان گو الگو Future راهی برای نمایش نتیجه یک عملیات ناهمزمان (asynchronous) است که ممکن است آن عملیات هنوز تکمیل نشده باشد اما این الگو به شما این امکان را می دهد کدی بنویسید که طوری رفتار کند که گویی نتیجه یک عملیات فورا در دسترس است. حتی اگر عملیات در پس زمینه در حال اجرا باشد.
9.4.13.2 دیاگرام # 9.4.13.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;time&amp;#34; 6) 7 8type FutureInt struct { 9 result chan int 10} 11 12func (f *FutureInt) Get() int { 13 return &amp;lt;-f.</description></item><item><title>9.4.14 الگو Pipeline</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-pipeline/</guid><description>9.4.14.1 توضیحات # الگو خط لوله (Pipeline) یکی از پرکاربردی ترین الگوها در همزمانی می باشد شما با استفاده از این الگو می توانید تسک های بزرگ را به تسک های کوچکتر و مستقل تقسیم کنید که می توانند بطور همزمان کار کنند. هر stage داخل یک گوروتین انجام می شود و بواسطه کانال داده ها بین stage های مختلف منتقل می شود.
9.4.14.2 دیاگرام # 9.4.14.3 نمونه کد # 1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func gen(nums .</description></item><item><title>9.4.15 الگو Subscription</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-subscription/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-subscription/</guid><description>9.4.15.1 توضیحات # الگو Subscription یکی از الگوهای کاربردی برای پیاده سازی consumer می باشد که به یک آدرسی مشترک شوید و در بازده زمانی مختلف درخواست دهید و یکسری اطلاعات دریافت کنید.
9.4.15.2 دیاگرام # 9.4.15.3 نمونه کد # 1package main 2 3import ( 4 &amp;#34;context&amp;#34; 5 &amp;#34;encoding/json&amp;#34; 6 &amp;#34;fmt&amp;#34; 7 &amp;#34;io/ioutil&amp;#34; 8 &amp;#34;log&amp;#34; 9 &amp;#34;net/http&amp;#34; 10 &amp;#34;os&amp;#34; 11 &amp;#34;time&amp;#34; 12) 13 14const exampleAPIAddress = &amp;#34;https://random-data-api.com/api/stripe/random_stripe&amp;#34; 15 16type Card struct { 17 Id uint `json:&amp;#34;id&amp;#34;` 18 Uid string `json:&amp;#34;uid&amp;#34;` 19 ValidCard string `json:&amp;#34;valid_card&amp;#34;` 20 Token string `json:&amp;#34;token&amp;#34;` 21 InvalidCard string `json:&amp;#34;invalid_card&amp;#34;` 22 Month string `json:&amp;#34;month&amp;#34;` 23 Year string `json:&amp;#34;year&amp;#34;` 24 CCV string `json:&amp;#34;ccv&amp;#34;` 25 CCVAmex string `json:&amp;#34;ccv_amex&amp;#34;` 26} 27 28type Subscription interface { 29 Updates() &amp;lt;-chan Card 30} 31 32type Fetcher interface { 33 Fetch() (Card, error) 34} 35 36type sub struct { 37 fetcher Fetcher 38 updates chan Card 39} 40 41type fetcher struct { 42 url string 43} 44 45type fetchResult struct { 46 fetchedCard Card 47 err error 48} 49 50// NewSubscription create subscription for fetch data per freq time in second 51func NewSubscription(ctx context.</description></item><item><title>9.4.16 الگو Bridge Channel</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-brdige-channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-brdige-channel/</guid><description>9.4.16.1 توضیحات # با استفاده از الگو Bridge Channel می توانید بین ۲ کانال داده ای را منتقل کنید فرض کنید یک داده را به کانال input میفرستید و از دریافت داده آن را می توانید به کانال دیگری منتقل کنید و عملا شما یک پل برای انتقال داده ایجاد کردید.
9.4.16.2 دیاگرام # 9.4.17.3 نمونه کد # 1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 // Declare input and output channels 7 input := make(chan int) 8 output := make(chan int) 9 10 // Launch goroutine to act as bridge between channels 11 go func() { 12 for { 13 // Wait for value on input channel 14 value := &amp;lt;-input 15 16 // Forward value to output channel 17 output &amp;lt;- value 18 } 19 }() 20 21 // Send a value to the input channel 22 input &amp;lt;- 1 23 24 // Receive the value from the output channel 25 fmt.</description></item><item><title>9.4.17 الگو Queuing</title><link>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-queuing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/concurrency-patterns/go-concurrency-pattern-queuing/</guid><description>9.4.17.1 توضیحات # الگوی &amp;ldquo;صف&amp;rdquo; در زبان گو الگویی است که در آن از یک گوروتین برای بافر کردن و مدیریت ترتیب مقادیر ارسال شده و دریافت شده از یک کانال استفاده می شود.
9.4.17.2 دیاگرام # 9.4.17.3 نمونه کد # 1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 // Declare the queue channel with a buffer size of 5 7 queue := make(chan int, 5) 8 9 // Send values to the queue 10 go func() { 11 for i := 0; i &amp;lt; 10; i++ { 12 queue &amp;lt;- i 13 fmt.</description></item><item><title>9.5.1 الگو Circuit Breaker</title><link>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-circuit-breaker-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-circuit-breaker-pattern/</guid><description>الگو Circuit Breaker&amp;hellip;</description></item><item><title>9.5.2 الگو Debounce</title><link>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-debounce-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-debounce-pattern/</guid><description>الگو Debounce&amp;hellip;</description></item><item><title>9.5.3 الگو Retry</title><link>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-retry-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-retry-pattern/</guid><description>الگو Retry&amp;hellip;</description></item><item><title>9.5.4 الگو Throttle</title><link>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-throttle-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-throttle-pattern/</guid><description>الگو Throttle&amp;hellip;</description></item><item><title>9.5.5 الگو Timeout</title><link>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-timeout-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/cloud-native-patterns/go-cloud-native-timeout-pattern/</guid><description>الگو Timeout&amp;hellip;</description></item><item><title>9.6.1 ضد الگو سینتکسی</title><link>https://book.gofarsi.ir/chapter-9/anti-pattern/go-anti-patterns-in-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://book.gofarsi.ir/chapter-9/anti-pattern/go-anti-patterns-in-syntax/</guid><description>ضد الگو سینتکسی</description></item></channel></rss>