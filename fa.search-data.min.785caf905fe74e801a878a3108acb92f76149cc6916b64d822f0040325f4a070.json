[{"id":0,"href":"/preface/","title":"پیشگفتار","section":"صفحه اصلی","content":"متن پیشگفتار\u0026hellip;.\n"},{"id":1,"href":"/history/","title":"تاریخچه","section":"صفحه اصلی","content":"زبان گو (Go) در سال ۲۰۰۷ (به شمسی: ۱۳۸۶) توسط «شرکت گوگل» با هدف افزایش بهره‌وری برنامه‌نویسی در محیط چندهسته‌ای، رایانه‌های شبکه‌ای و کدبیس‌های بزرگ طراحی شد [به نقل از ویکی پدیا] و سپس به عنوان یک زبان کامپایلری و تایپ استاتیک در نوامبر سال ۲۰۰۹ بصورت عمومی با هدف کامپایل کارآمد ، اجرای کارآمد وسهولت برنامه نویسی معرفی شد که توسط شرکت گوگل توسعه داده شده است و بسیاری از اعضای تیم طراحی و توسعه زبان گو [Ken Thompson, Rob Pike, Robert Griesemer] سال ها تجربه در زمینه تحقیق و توسعه زبان برنامه نویسی دارند.\nزبان گو دارای یک سری ویژگی های منحصر به فرد می باشد و برخی از ویژگی هایش از سایر زبان ها الهام گرفته شده است :\nپشتیبانی از برنامه نویسی همزمانی بصورت Built-in گوروتین ها امکان اجرای همزمانی توابع را فراهم می کند و همچنین گوروتین ها واقعا خیلی سبک هستند به طوری که شما می توانید هزاران گوروتین را همزمان در سخت افزارهای مدرن بدون هیچ مشکل عملکردی اجرا کنید. کانال ها برپایه مدل CSP می باشد که امکان همگام سازی داده ها بین گوروتین ها را فراهم می کند. پشتیبانی از تایپ های map و slice امکان پیاده سازی پلی مورفیسم با استفاده از اینترفیس ها پوینترها کلوژر توابع (یک تابع معمولی که داخل یک تابع دیگر به عنوان بازگشت تعریف می شود) متدها امکان defer برای تعویق فراخوانی یک تابع قابلیت جاسازی تایپ ها ایمنی حافظه در زبان گو قابلیت زباله جمع کن خودکار سازگاری کامل با انواع پلتفرم ها نظیر [linux, windows, mac, AIX, android, freeBSD] جهت توسعه و کامپایل امکان Cross-compile با این امکان می توانید در هر پلتفرمی برای سایر پلتفرم ها کامپایل کنید پشتیبانی از جنریک یا تایپ پارامتر (از نسخه ۱.۱۸) تست نویسی آسان اینترفیس و رفلکشن زبان گو مثل سایر زبان ها نظیر c, cpp یا java نیاز به نقطه ویرگول (Semicolons) ندارد و به نسبت زبان هایی که معرفی کردیم پرانتز کمتری استفاده می کند و همچنین ظاهر سینتکس گو خیلی خواناتر و راحتر می باشد. علاوه بر ویژگی های که در بالا معرفی کردیم یک سری نکات برجسته در خصوص زبان گو وجود دارد که به شرح زیر می باشند:\nسینتکس زبان گو به گونه ای طراحی شده که خیلی ساده و تمیز می باشد و این باعث می شود خیلی سریع زبان گو را یاد بگیرید و از همه مهم تر توسعه پروژه های مقیاس پذیر مقیاس پذیر با زبان گو به دلیل سادگی و آشکار بودن مفاهیم خیلی سریعتر صورت میگیرد.\nزبان گو دارای کلی پکیج های استاندارد و کاربردی جهت توسعه می باشد که همه این پکیج ها در انواع پلتفرم ها جهت توسعه قابل استفاده است.\nزبان گو دارای یک جامعه بزرگ از توسعه دهندگان و انجمن های فعال می باشد که خیلی سریع می توانید به پاسخ سوالات خود برسید.\nبرنامه نویس های زبان گو را گوفر صدا میزنند. "},{"id":2,"href":"/installation/","title":"آموزش نصب","section":"صفحه اصلی","content":"جهت نصب زبان گو برروی سیستم عامل مورد نظر خود در ابتدا باید نسخه مناسب با پلت فرم خود را دانلود کنید.\nلینوکس در اینجا نسخه مرتبط با لینوکس خود را دانلود کنید. $ wget -c https://go.dev/dl/go1.xx.x.linux-amd64.tar.gz سپس دستور زیر را بزنید تا اگر نسخه قبلی وجود دارد پاک شود و نسخه جدید در مسیر usr/local/go/ جایگزین شود. $ sudo rm -rf /usr/local/go \u0026amp;\u0026amp; sudo tar -C /usr/local -xzf go1.xx.x.linux-amd64.tar.gz افزودن مسیر usr/local/go/bin/ به متغیرهای محیطی export PATH=$PATH:/usr/local/go/bin بهتر است برای اینکه هر بار هر بار ترمینال را باز میکنید و فایل go توسط shell شناخته شود دستور فوق را به فایل home/{user}/.profile/ اضافه کنید. جهت اطمینان از اینکه زبان گو بدرستی برروی سیستم عامل شما نصب شده است دستور زیر را داخل ترمینال بزنید. $ go version ویندوز روش اول # در اینجا نسخه مرتبط با ویندوز خود را دانلود کنید. سپس فایل go1.xx.x.windows-{arch}.msi را اجرا کنید. مراحل نصب را بصورت پیش فرض طی کنید تا زبان گو برروی ویندوز نصب شود. پس از نصب جهت اطمینان از نصب بود زبان گو مراحل زیر را انجام دهید: وارد منو استارت شوید. در منو استارت کلمه cmd را جستجو کنید و سپس آن را اجرا کنید. داخل خط فرمان دستور زیر را بزنید تا از نصب بودن زبان گو اطمینان حاصل فرمایید. go version روش دوم # برای نصب گو می‌توانید از Chocolatey Package Manager استفاده کنید.\nخط فرمان PowerShell را به صورت Administrator باز کنید و دستور زیر را داخل PowerShell بزنید. Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) بعد از نصب می‌توانید از دستور choco برای نصب گو استفاده کنید. choco install golang جهت اطمینان از اینکه زبان گو بدرستی برروی سیستم عامل شما نصب شده است دستور زیر را داخل ترمینال بزنید. $ go version دقت داشته باشید برای نصب برنامه‌های مختلف مثل git و یا ابزارهای دیگر در محیط Administrator باید از دستور choco استفاده کنید. مکینتاش روش اول # در اینجا نسخه مرتبط با مکینتاش خود را دانلود کنید. سپس فایل go1.xx.x.darwin-{arch}.pkg را اجرا کنید. مراحل نصب را بصورت پیش فرض طی کنید تا زبان گو برروی مکینتاش نصب شود. پس از نصب اگر ترمینال باز بود آن را کامل ببنید تا تغییرات صورت گیرد. جهت اطمینان از اینکه زبان گو بدرستی برروی سیستم عامل شما نصب شده است دستور زیر را داخل ترمینال بزنید. $ go version روش دوم # برای نصب گو میتوانید از Homebrew Package Manager استفاده کنید.\nبرای نصب brew می‌توانید ترمینال خود را باز کنید و از دستور زیر استفاده کنید. $ /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; بعد از نصب brew از دستور زیر برای نصب گو داخل ترمینال استفاده کنید. $ brew update \u0026amp;\u0026amp; brew install golang جهت اطمینان از اینکه زبان گو بدرستی برروی سیستم عامل شما نصب شده است دستور زیر را داخل ترمینال بزنید. $ go version "},{"id":3,"href":"/toolchain/","title":"ابزارها, دستورات گو و معرفی IDE","section":"صفحه اصلی","content":"پس از اینکه زبان گو را برروی سیستم خود نصب کردید از طریق ترمینال و یا خط فرمان ویندوز قابل دسترس است که می توانید با زدن کلمه go یکسری عملیات انجام دهید:\n$ go Go is a tool for managing Go source code. Usage: go \u0026lt;command\u0026gt; [arguments] The commands are: bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package or symbol env print Go environment information fix update packages to use new APIs fmt gofmt (reformat) package sources generate generate Go files by processing source get add dependencies to current module and install them install compile and install packages and dependencies list list packages or modules mod module maintenance work workspace maintenance run compile and run Go program test test packages tool run specified go tool version print Go version vet report likely mistakes in packages Use \u0026#34;go help \u0026lt;command\u0026gt;\u0026#34; for more information about a command. Additional help topics: buildconstraint build constraints buildmode build modes c calling between Go and C cache build and test caching environment environment variables filetype file types go.mod the go.mod file gopath GOPATH environment variable gopath-get legacy GOPATH go get goproxy module proxy protocol importpath import path syntax modules modules, module versions, and more module-get module-aware go get module-auth module authentication using go.sum packages package lists and patterns private configuration for downloading non-public code testflag testing flags testfunc testing functions vcs controlling version control with GOVCS Use \u0026#34;go help \u0026lt;topic\u0026gt;\u0026#34; for more information about that topic. جدول دستورات (Commands) # دستور توضیحات build با این دستور می توانید فایل go را کامپایل go build main.go کنید. clean با این دستور می توانید فایل های کش شده را پاکسازی کنید doc با این دستور می توانید به داکیومنت هر یک از توابع عمومی go doc fmt.Println را ببینید env با این دستور می توانید متغیرهای محیطی تنظیم شده زبان گو را ببینید و آنها را با دستور go env -w key=value مقدار دهی کنید. fmt با این دستور می توانید کدهای خود را مرتب go fmt ./... کنید. install با استفاده از این دستور می توانید یکسری پکیج های را گرفته و کامپایل کنید جهت استفاده list لیست پکیج ها و ماژول های دانلود شده generate با این دستور می توانید از قابلیتGenerator زبان گو استفاده کنید و فایل generate کنید. mod برای مدیریت و ایجاد فایل mod به ازای هر پروژه get با این دستور می توانید پکیجی را دانلود یا بروز رسانی کنید و همچنین برای استفاده از این دستور نیاز به git دارید که نصب باشد work با این دستور می توانید یک workspace ایجاد کنید و آن را مدیریت کنید. run با این دستور می توانید فایل های گو یا پروژه را go run main.go اجرا کنید test با این دستور می توانید فایل های تست را go test example_test.go اجرا کنید version با این دستور می توانید نسخه نصب شده زبان گو را ببینید vet با این دستور می توانید اشتباهات کدهای خود را ببینید اجرای کد ساده در زبان گو # در زیر یک نمونه کد ساده قرار دادیم که به سادگی می توانید با دستور go run main.go اجرا کنید و خروجی را ببینید.\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello world!!!\u0026#34;) } $ go run main.go Hello world!!! در کد فوق ما یکسری کلید واژه نظیر package , import , func استفاده کردیم که در بخش 1.2 کلید واژه و شناسه‌ها آشنا می شوید.\nانواع نرم افزارهای محیط توسعه (IDE) # زبان گو هم مثل سایر زبان ها دارای یکسری نرم افزار محیط توسعه می باشد. که در زیر محبوبترین ها را معرفی می کنیم.\nنرم افزار Jetbrains Goland اگر با سایر محصولات جت برینز آشنا باشید به راحتی از این نرم افزار محیط توسعه استفاده کنید. نرم افزار VsCode تقریبا همه برنامه نویس ها باهاش آشنا هستند یک نرم افزار محیط توسعه متن باز می باشد که خیلی محبوب است بین برنامه نویس ها است و برای استفاده زبان گو در این نرم افزار باید افزونه vscode-go را نصب کنید. نرم افزار Vim یک نرم افزار متن باز و معروف می باشد که داخل ترمینال قابل استفاده است و ازش می توانید جهت توسعه با زبان گو استفاده کنید و البته نیازمند نصب پلاگین می باشد. "},{"id":4,"href":"/roadmap/","title":"نقشه یادگیری زبان گو","section":"صفحه اصلی","content":"در زیر ما نقشه یادگیری زبان گو را براساس داده های سایت roadmap.sh قرار دادیم که در ابتدا باید طبق نقشه یادگیری زبان گو شروع کنید و سپس برای افزایش دانش خود به نقشه یادگیری بک اند نگاهی بندازید.\nنقشه یادگیری زبان گو نقشه یادگیری بک اند "},{"id":5,"href":"/chapter-1/","title":"فصل اول: آشنایی با مفاهیم گو","section":"صفحه اصلی","content":"در فصل اول به مفاهیم پایه زبان برنامه نویسی گو بطور عمیق می بپردازیم. این فصل شامل چندین بخش هستش که در زیر بطور مختصر توضیح دادیم :\nبخش اول : ساختار کد گو بخش دوم : کلید واژه ها و شناسه ها بخش سوم : تایپ های پایه نظیر اعداد صحیح, float, رشته و boolean بخش چهارم : عملگرها نظیر = - / * + \u0026gt; \u0026lt; بخش پنجم : متغیرها و ثابت ها بخش ششم : تابع بخش هفتم : آرایه و slice بخش هشتم : نقشه بخش نهم : عبارات شرطی و switch بخش دهم : انواع حلقه ها بخش یازدهم : کار با پکیج ها و نحوه استفاده از پکیج بخش دوازدهم : به defer , panic, recovery می پردازیم "},{"id":6,"href":"/chapter-1/structure-of-go-code/","title":"1.1 ساختار کد گو","section":"فصل اول: آشنایی با مفاهیم گو","content":"همانطور که در تاریخچه زبان گو گفتیم, زبان گو سینتکس خیلی تمیز و ساده ای دارد که به راحتی می توانید کدهای زبان گو را بخوانید. در ادامه ما سعی می کنیم با مثال های ساده شما را با ساختار کد زبان گو آشنا کنیم.\nبه نقل از تاریخچه سینتکس زبان گو به گونه ای طراحی شده که خیلی ساده و تمیز می باشد و این باعث می شود خیلی سریع زبان گو را یاد بگیرید و از همه مهم تر توسعه پروژه های مقیاس پذیر با زبان گو به دلیل سادگی و آشکار بودن مفاهیم خیلی سریعتر صورت میگیرد. زبان برنامه نویسی # یک زبان برنامه‌نویسی یک زبان مصنوعی انگلیسی است که برای بیان محاسباتی که توسط یک ماشین (مخصوصاً رایانه) قابل انجام است، طراحی شده‌است. زبان‌های برنامه‌نویسی برای ایجاد برنامه‌هایی به کار می‌روند که رفتار یک ماشین را مشخص می‌کنند، الگوریتم دقیق را بیان می‌کنند، یا روشی برای تعامل انسان و رایانه هستند. بسیاری از زبان‌های برنامه‌نویسی تعدادی قالب از ویژگی‌های نوشته شده دستوری یا نحو (syntax) و معناشناسی (semantics) دارند، چرا که رایانه‌ها دستورهای دقیقاً مشخص نیاز دارند. برخی توسط سند خصوصیات (specification document) تعیین شده‌اند (برای مثال یک استاندارد ISO)، در حالی که برخی دیگر دارای پیاده‌سازی غالبی می‌باشند[به نقل از ویکی پدیا].\nیک نمونه کد ساده زبان گو # قبل از اینکه محتوای بدنه کد زیر را بررسی کنید بهتره نحوه کامنت گذاری کد در زبان گو آشنا شوید.\nکامنت گذاری # کامنت ها در زبان گو همانند زبان سی می باشد که با استفاده از ۲ اسلش ایجاد میشود.\n// کامنت عادی یک خطی /* بلاک کامنت برای نوشتن کامنت چند خطی */ نمونه کد # در پایین یک نمونه کد قرار دادیم که با کامنت هر کدام از بخش های بدنه کد گو را توضیح دادیم\npackage main // نام پکیج فایل سورس را مشخص می کند import \u0026#34;math/rand\u0026#34; // یک پکیج استاندارد ایمپورت شده const MaxRnd = 16 // یک ثابت تعریف شده است // تابع func StatRandomNumbers(n int) (int, int) { var a, b int for i := 0; i \u0026lt; n; i++ { if rand.Intn(MaxRnd) \u0026lt; MaxRnd/2 { a = a + 1 } else { b++ } } return a, b } // تابع main اولین نقطه شروع اجرای کد شما می باشد که در این تابع سایر موارد تعریف می شود. func main() { var num = 100 x, y := StatRandomNumbers(num) print(\u0026#34;Result: \u0026#34;, x, \u0026#34; + \u0026#34;, y, \u0026#34; = \u0026#34;, num, \u0026#34;? \u0026#34;) println(x+y == num) } سورس کد بالا را در فایلی با نام main.go ذخیره می کنیم و سپس با دستور زیر اجرا می کنیم تا خروجی کد فوق را ببینیم :\n$ go run basic-code-element-demo.go Result: 46 + 54 = 100? true تابع main # در زبان گو پکیج main به عنوان یک پکیج منحصربه فرد در نظر گرفته می‌شود، به شکلی که در هنگام اجرای برنامه مشخص میکند شروع کار و خواندن برنامه از کجا باید باشد. در نهایت داخل این پکیج ما تابع ()main را داریم که این تابع نقطه شروع اجرای برنامه ما خواهد بود. این تابع هیچ ارگومانی نمیگیرد و هیچ چیزی رو هم بازگشت نخواهد داد. زبان گو به صورت خودکار تابع ()main را فراخوانی می‌کند. برای همین نیازی به فراخوانی این تابع توسط شما وجود ندارد. برای همین باید دقت داشته باشید در هر برنامه ای که می‌نویسید حتما از پکیج و تابع main باید استفاده کنید.\n// تعریف پکیج main package main // تعریف تابع main func main() { println(\u0026#34;Hello GoFarsi!\u0026#34;) } اجرای کد # برای اجرای کدهای گو می‌توان از پارامتر run استفاده کرد.\n$ go run main.go Result: Hello GoFarsi! دستور بالا ابتدا داخل پوشه temp سیستم شما یک فایل اجرایی را درست میکند و سپس آن فایل را اجرا میکند و در نهایت خروجی را به ما نشان میدهد. اگر شما بخواهید خروجی فایل اجرایی (executable) داشته باشید و سپس آن را اجرا کنید می‌توانید از دستور زیر استفاده کنید:\n$ go build main.go $ ./main Result: Hello GoFarsi! اگر بخواهید برای خروجی فایل اجرایی اسمی در نظر بگیرید میتوانید از دستور زیر با پارامتر o- استفاده کنید.\n$ go build -o goFarsi main.go $ ./goFarsi Result: Hello GoFarsi! دقت کنید اگر از سیستم عامل ویندوز استفاده میکنید بعد از وارد کردن اسم پسوند exe را نیز اضافه کنید. برای راحتی و سرعت بخشیدن هنگام توسعه ما از دستور go run استفاده می‌کنیم. بررسی syntax # برخلاف بیشتر زبان‌های برنامه نویسی در زبان گو شما نمی‌توانید از حالت های مختلف برای نوشتن کد خود استفاده کنید. مثلا کد زیر هنگام کامپایل کردن خطا میدهد.\npackage main func main() { println(\u0026#34;not compiled\u0026#34;) } خروجی کد بالا :\n$ go run main.go Result: # command-line-arguments .\\main.go:4:1: syntax error: unexpected semicolon or newline before { صرفا با تغییر براکت ما با خطا مواجه شدیم. شاید از دید شما این نوع نوشتن کد نباید خطا ایجاد کند. ولی وقتی شما داخل یک تیم هستید و مجبور هستید کدها را بازخوانی کنید تا بفهمید چه اتفاقی افتاده است، با حالتهای مختلف سینتکس مواجه نخواهید شد، و همه کدها یک دست و از یک ساختار پیروی می‌کند. که باعث خواندن سریع تر، درک بهتر و امکان توسعه سریعتر را برای ما و هم تیمی های ما ایجاد خواهد کرد.\nاستفاده از go fmt # برای آنکه از این نوع خطاها جلوگیری شود و فرمت مناسب و یک نواختی داخل کدهای ما وجود داشته باشد، خود IDEها این خطاها را بهمون نشون میدن. خود توسعه دهندگان زبان گو پارامتر fmt یا به عبارتی فرمت را در اختیار ما قرار داده اند تا هر زمان که کدی مینویسم و ذخیره میکنیم بتوانیم با استفاده از این دستور ساختار کد خود را مرتب کنید و اگر خطایی وجود داشته باشد قبل از کامپایل کردن برنامه آن را پیدا و رفع کنیم. مثلا خروجی استفاده از پارامتر fmt\n$ go fmt main.go Result: .\\main.go:4:1: unexpected semicolon or newline before { حالا فرض کنید کدی را نوشته اید و داخل کد شما فضای زیادی وجود دارد و اندازه tab ها و space ها مشخص نیست. به مثال زیر توجه کنید:\npackage main func main(){ println(\u0026#34;print line 1\u0026#34;) println(\u0026#34;print line 2\u0026#34;) } وقتی کدی شبیه کد بالا را دارید و از دستور go fmt استفاده میکنیم خروجی کد بالا به شکل زیر تغییر پیدا می‌کند:\npackage main func main() { println(\u0026#34;print line 1\u0026#34;) println(\u0026#34;print line 2\u0026#34;) } در برنامه فوق ما یکسری کلمات کلیدی نظیر package, import, const, func, var , for, if, else, return استفاده کردیم و سایر کلماتی که داخل کد فوق دیدید به عنوان شناسه می باشد. برای اطلاعات بیشتر در خصوص کلید واژه و شناسه لطفا بخش کلید واژه و شناسه ها را مطالعه فرمایید. "},{"id":7,"href":"/chapter-1/go-built-in-keywords-identifiers/","title":"1.2 کلید واژه و شناسه‌ها","section":"فصل اول: آشنایی با مفاهیم گو","content":"در این بخش قصد داریم به کلید واژه و شناسه های زبان گو بپردازیم.\nکلید واژه # زبان گو تا نسخه فعلی فقط ۲۵ تا کلید واژه دارد که به شرح زیر است:\n1 2 3 4 5 1 break default func interface select 2 case defer go map struct 3 chan else goto package switch 4 const fallthrough if range type 5 continue for import return var کلمات کلیدی فوق به ۴ دسته تقسیم می‌شوند که به شرح زیر می‌باشد:\nکلمات کلیدی که بصورت گلوبال در بدنه قرار می‌گیرند «package, import, type, var, const, func» کلمات کلیدی کامپوزیت «struct, inteface, map, chan» کلمات کلیدی که در جریان کنترل کد استفاده می‌شوند «break, case, continue, default, if, else, for, fallthrough, goto, range, return, switch, select» در بخش های دیگر کتاب ما بطور مفصل به مفاهیم کلمات کلیدی فوق می‌پردازیم. شناسه‌ها # شناسه توکنی است که باید از حروف یونیکد, ارقام یونیکد (اعداد دسته بندی شده در استاندارد ۸.۰ یونیکد) و خط زیرین ـ تشکیل شده باشد.\nعلامت کاربرد ـ نادیده گرفتن \u0026amp; دسترسی به آدرس حافظه * دسترسی مقدار داخل یک خانه حافظه قوانین شناسه‌ها # نامگذاری باید از حروف a-z یا A-Z و یا 0-9 باشد. نام شناسه‌ها نباید با اعداد شروع شود. نام شناسه‌ها به حروف بزرگ و کوچک حساس می‌باشد. استفاده از کلید واژه ممنوع می‌باشد. هیچ محدودیتی در تعداد حروف نام شناسه وجود ندارد و مطلوب ترین حالت ۴ الی ۱۵ حرف می‌باشد. // شناسه‌های معتبر _geeks23 geeks gek23sd Geeks geeKs geeks_geeks // شناسه‌های نامعتبر 212geeks if default در زبان گو یکسری شناسه‌ها از قبل برای برخی از بخش های کد تعیین شده است که در زیر می‌توانید ببینید :\n// Constant (ثابت ها) true, false, iota, nil // Types (تایپ ها) int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr, float32, float64, complex128, complex64, bool, byte, rune, string, error // Functions (توابع) make, len, cap, new, append, copy, close, delete, complex, real, imag, panic, recover "},{"id":8,"href":"/chapter-1/go-basic-types/","title":"1.3 تایپ های پایه","section":"فصل اول: آشنایی با مفاهیم گو","content":"زبان گو مثل سایر زبان‌ها یکسری تایپ‌های پایه دارد که در هر بخش از کد گو می‌توانید استفاده کنید. در ادامه ما این تایپ ها را با مقادیر پیش فرض‌شان معرفی می کنیم.\nتایپ محدوده مقدار پیش فرض یا مقدار صفر حجم استفاده از حافظه int بستگی به معماری سیستم عامل که ۳۲ بیت یا ۶۴ بیت باشد 0 ۴ یا 8 بایت int8 128- تا 127 0 ۱ بایت int16 32768- تا 32767 0 ۲ بایت int32 2147483648- تا 2147483647 0 ۴ بایت int64 9223372036854775808- تا 9223372036854775807 0 8 بایت uint بستگی به معماری سیستم عامل که ۳۲ بیت یا ۶۴ بیت باشد 0 ۴ یا 8 بایت uint8 0 تا 255 0 ۱ بایت uint16 0 تا 65535 0 ۲ بایت uint32 0 تا 6294967295 0 ۴ بایت uint64 0 تا 18446744073709551615 0 8 بایت uintptr عدد خیلی بزرگ 0 ۸ بایت float32 IEEE-754 0 ۴ بایت float64 IEEE-754 0 ۸ بایت complex64 - 0+0i ۸ بایت complex128 - 0+0i ۱۶ بایت bool - false ۱ بایت string - \u0026quot; \u0026quot; ۸ بایت زبان گو بطور پیش فرض از دو نوع تایپ با نام مستعار پشتیبانی می کند :\nتایپ byte این تایپ نام مستعار برای تایپ uint8 می باشد. تایپ rune این تایپ نام مستعار برای تایپ int32 می باشد. سفارشی‌سازی تایپ‌(ها) # نام‌گذاری جدید : برای تایپ‌های رشته‌ای، عددی و بول، می‌توان نام سفارشی جدید انتخاب و در پروژه استفاده کرد: /* type alias */ // bul and bool define the same type. type bul = bool // content and string define the same type. type content = string // UI8, uint8 and byte define the same type. type UI8 = uint8 // Word, rune and int32 define the same type. type Word = rune ایجاد تایپ جدید معادل یک تایپ موجود : همچنین می‌توان از تایپ‌های موجود، یک نمونه جدید ایجاد کرد: /* type definition */ // state and bool are two different types. type state bool // str and string are two different types. type str string // ID and uint64 are two different types. type ID uint64 // decimal and float32 are two different types. type decimal float32 مقدار پیش فرض تایپ ها # هر یک از تایپ ها در زبان گو دارای مقدار پیش فرضی می باشد که به شرح زیر است :\nتایپ بولین مقدار پیش فرضش false می باشد. تمامی تایپ اعداد (int, uint, float) مقدار پیش فرضش صفر می باشد. تایپ استرینگ مقدار پیش فرضش \u0026quot; \u0026quot; می باشد. انواع مقادیر تایپ ها # در زبان گو تایپ ها یکسری مقادیر مختلفی را دریافت می کنند که در زیر به این مقادیر می پردازیم.\nتایپ بولین # تایپ بولین فقط true و false را به عنوان مقدار دریافت می کند.\nتایپ Integer # تایپ اعداد ۴ نوع مقدار مختلف دریافت می کند که به ترتیب Decimal (پایه ۱۰), Octal (پایه ۸), Hex (پایه ۱۶) و Binrary (پایه ۲ یا دودویی) می باشد.\n0xF // the hex form (starts with a \u0026#34;0x\u0026#34; or \u0026#34;0X\u0026#34;) 0XF 017 // the octal form (starts with a \u0026#34;0\u0026#34;, \u0026#34;0o\u0026#34; or \u0026#34;0O\u0026#34;) 0o17 0O17 0b1111 // the binary form (starts with a \u0026#34;0b\u0026#34; or \u0026#34;0B\u0026#34;) 0B1111 15 // the decimal form (starts without a \u0026#34;0\u0026#34;) package main func main() { println(15 == 017) // true println(15 == 0xF) // true } تایپ Float # تایپ Float چند نوع مقدار را دریافت می کند که به ترتیب مقدار ممیز شناور اعشاری ممکن است شامل یک قسمت صحیح اعشاری، یک نقطه اعشاری، یک قسمت کسری اعشاری، و یک قسمت توانی عدد صحیح (مبتنی بر 10) باشد.\n1.23 01.23 // == 1.23 .23 1. // An \u0026#34;e\u0026#34; or \u0026#34;E\u0026#34; starts the exponent part (10-based). 1.23e2 // == 123.0 123E2 // == 12300.0 123.E+2 // == 12300.0 1e-1 // == 0.1 .1e0 // == 0.1 0010e-2 // == 0.1 0e+5 // == 0.0 تایپ rune # تایپ rune یک تایپ با نامستعار int32 می باشد که از تایپ های اعداد صحیح خاصی هستند. در rune برای ذخیره نقطه یونیکد یا حروف خاص استفاده می شود که زیر به عنوان نمونه قرار دادیم.\n\u0026#39;a\u0026#39; // an English character \u0026#39;π\u0026#39; \u0026#39;众\u0026#39; // a Chinese character // 141 is the octal representation of decimal number 97. \u0026#39;\\141\u0026#39; // 61 is the hex representation of decimal number 97. \u0026#39;\\x61\u0026#39; \u0026#39;\\u0061\u0026#39; \u0026#39;\\U00000061\u0026#39; package main func main() { println(\u0026#39;a\u0026#39; == 97) println(\u0026#39;a\u0026#39; == \u0026#39;\\141\u0026#39;) println(\u0026#39;a\u0026#39; == \u0026#39;\\x61\u0026#39;) println(\u0026#39;a\u0026#39; == \u0026#39;\\u0061\u0026#39;) println(\u0026#39;a\u0026#39; == \u0026#39;\\U00000061\u0026#39;) println(0x61 == \u0026#39;\\x61\u0026#39;) println(\u0026#39;\\u4f17\u0026#39; == \u0026#39;众\u0026#39;) } تایپ رشته (string) # در زبان گو مقدار تایپ رشته بطور پیش فرض از نوع یونیکد UTF-8 می باشد.\n// The interpreted form. \u0026#34;Hello\\nworld!\\n\\\u0026#34;你好世界\\\u0026#34;\u0026#34; // The raw form. `Hello world! \u0026#34;你好世界\u0026#34;` همچنین رشته از کارکترهای خاص یونیکد مانند 0x0D پشتیبانی می کند.\nخوانایی بهتر اعداد با _ # در زبان گو شما می توانید برای خوانایی بهتر اعداد چند رقمی از _ برای جداسازی استفاده کنید.\n// Legal ones: 6_9 // == 69 0_33_77_22 // == 0337722 0x_Bad_Face // == 0xBadFace 0X_1F_FFP-16 // == 0X1FFFP-16 0b1011_0111 + 0xA_B.Fp2i // Illegal ones: _69 // _ can\u0026#39;t appear as the first character 69_ // _ can\u0026#39;t appear as the last character 6__9 // one side of _ is a illegal character 0_xBadFace // \u0026#34;x\u0026#34; is not a legal octal digit 1_.5 // \u0026#34;.\u0026#34; is not a legal octal digit 1._5 // \u0026#34;.\u0026#34; is not a legal octal digit "},{"id":9,"href":"/chapter-1/go-operators/","title":"1.4 عملگرها","section":"فصل اول: آشنایی با مفاهیم گو","content":"زبان گو هم مثل سایر زبان ها دارای یکسری عملگرها مانند: عملگرهای حسابی, عملگرهای مقایسه ای, عملگرهای منطقی و عملگرهای بیتی می باشد.\nعملگرهای حسابی # زبان گو دارای ۵ تا عملگر حسابی می باشد که به ترتیب :\nعملگر نام + جمع - تفریق * ضرب / تقسیم % باقی مانده این ۵ تا عملگر اغلب به ترتیب مجموع, تفاوت, حاصلضرب و ضریب نیز نامیده می شوند.\na := 1 b := 2 c := a + b d := a - b e := a * b f := a / b g := a % b در کد نمونه بالا ما := که متغیر کوتاه است استفاده کردیم که در بخش 1.5 متغیرها و ثابت ها معرفی خواهیم کرد. عملگرهای مقایسه ای # زبان گو دارای ۶ عملگر مقایسه ای می باشد که به ترتیب :\nعملگر نام == مساوی بودن =! مساوی نبودن با \u0026gt; کمتر از =\u0026gt; کمتر یا مساوی \u0026lt; بزرگتر =\u0026lt; بزرگتر یا مساوی نتیجه این استفاده از این عملگرهای مقایسه فوق یک نوع untyped بولین است یعنی حاصل این مقایسه ها در واقع true یا false است.\na := 1 b := 2 c := 1 if a == b {} // false if a == c {} // true if a \u0026lt; b {} // true if b \u0026gt; c {} // true if c \u0026lt;= a {} // true if c \u0026gt;= b {} // false if b != a {} // true if c != a {} // false عملگرهای منطقی # زبان گو دارای ۳ نوع عملگر منطقی می باشد که در زیر به ترتیب :\n\u0026amp;\u0026amp; بولین untyped و (دودویی) مشروط و || بولین untyped یا (دودویی) مشروط یا ! بولین از نوع وضعیت مخالف a := true b := true c := false if a \u0026amp;\u0026amp; b {} // توضیحات شماره یک if a || b {} // توضیحات شماره دو if !c {} // توضیحات شماره سه if !(a == b) {} // توضیحات شماره چهار زمانیکه شما از عملگر \u0026amp;\u0026amp; استفاده می کنید دارید اعلام میکنید ۲ تا عملوند باید هر دو یک مقدار از یک نوع بولین untyped باشند. زمانیکه شما از عملگر || استفاده می کنید دارید اعلام می کنید یکی از ۲ تا عملوند باید true شود. زمانیکه شما از عملگر ! استفاده می کنید معکوس نتیجه عملوند را نیاز دارید (به عنوان مثال شماره سه مقدار متغیر c از نوع بولین false می باشد و وقتی ! گذاشتید نتیجه معکوس را نیاز دارید یعنی true). شماره چهار ما در ابتدا نتیجه a == b را که true هست را میگیریم و در نهایت معکوس آن را نیاز داریم. // x y x \u0026amp;\u0026amp; y x || y !x !y true true true true false false true false false true false true false true false true true false false false false false true true عملگرهای بیتی # زبان گو ۶ تا عملگرد بیتی می باشد که به ترتیب :\n\u0026lt;\u0026lt; SHIFT (LEFT) این عملگر دقیقا مانند عملگر SHIFT RIGHT است اما برخلاف shift به راست, از سمت چپ بیت ها را بر میدارد و به سمت راست بیت های صفر اضافه می کند \u0026gt;\u0026gt; SHIFT (RIGHT) عملوند مقدار که عملیات shift بر روی آن انجام میشود. عملوند سمت راست این نقش را ایفا میکند. عملوند تعداد که عمل shift با استفاده از آن بر روی عملوند ۱ انجام میشود. عملوند سمت راست این نقش را ایفا میکند. \u0026amp; AND درست مانند معنی لغوی AND, یعنی ‘و’, بدین معنی است که هر دو طرف باید ۱ باشند | OR خروجی این عملگر در صورتی ۱ خواهد بود که هر دو یا یکی از طرفین ۱ باشند ^ XOR خروجی این عملگر در صورتی یک خواهد بود که تنها یکی از طرفین ۱ باشد const N = 2 // A is an untyped value (default type as int). const A = 3.0 \u0026lt;\u0026lt; N // A == 12 // B is typed value (type is int8). const B = int8(3.0) \u0026lt;\u0026lt; N // B == 12 var m = uint(32) // The following three lines are equivalent to // each other. In the following two lines, the // types of the two \u0026#34;1\u0026#34; are both deduced as // int64, instead of int. var x int64 = 1 \u0026lt;\u0026lt; m var y = int64(1 \u0026lt;\u0026lt; m) var z = int64(1) \u0026lt;\u0026lt; m // The following line fails to compile. /* var _ = 1.23 \u0026lt;\u0026lt; m // error: shift of type float64 */ اولویت عملگرها # در زبان گو ما یکسری اولویت ها برای عملگرها داریم و همچنین در زبان گو مثل سایر زبان ها پرانتز () ترویج دهنده اولویت ها می باشد.\n* / % \u0026lt;\u0026lt; \u0026gt;\u0026gt; \u0026amp; \u0026amp;^ + - | ^ == != \u0026lt; \u0026lt;= \u0026gt; \u0026gt;= \u0026amp;\u0026amp; || توجه در زبان گو اولویت \u0026lt;\u0026lt; و \u0026gt;\u0026gt; بیشتر از + و - می باشد. "},{"id":10,"href":"/chapter-1/go-variables-and-consts/","title":"1.5 متغیرها و ثابت ها","section":"فصل اول: آشنایی با مفاهیم گو","content":"متغیر ها\u0026hellip;\n"},{"id":11,"href":"/chapter-1/go-function/","title":"1.6 تابع (function)","section":"فصل اول: آشنایی با مفاهیم گو","content":"توابع \u0026hellip;\n"},{"id":12,"href":"/chapter-1/go-array/","title":"1.7 آرایه و slice","section":"فصل اول: آشنایی با مفاهیم گو","content":"آرایه و slice\u0026hellip;\n"},{"id":13,"href":"/chapter-1/go-map/","title":"1.8 نقشه map","section":"فصل اول: آشنایی با مفاهیم گو","content":"عبارات \u0026hellip;\n"},{"id":14,"href":"/chapter-1/go-if-switch/","title":"1.9 شرط (if, switch)","section":"فصل اول: آشنایی با مفاهیم گو","content":"شرط \u0026hellip;\n"},{"id":15,"href":"/chapter-1/go-for/","title":"1.10 حلقه ها (for)","section":"فصل اول: آشنایی با مفاهیم گو","content":"حلقه ها \u0026hellip;\n"},{"id":16,"href":"/chapter-1/go-package/","title":"1.11 اضافه کردن پکیج در کد (package)","section":"فصل اول: آشنایی با مفاهیم گو","content":"پکیج ها \u0026hellip;\n"},{"id":17,"href":"/chapter-1/go-defer/","title":"1.12 defer, panic, recovery","section":"فصل اول: آشنایی با مفاهیم گو","content":"تعویق و panic و بازیابی \u0026hellip;\n"}]