<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><author>Javad Rajabzadeh</author><title>12.3 شبکه اتریوم on زبان گو فارسی</title><link>https://book.gofarsi.ir/chapter-12/ethereum/</link><description>Recent content in 12.3 شبکه اتریوم on زبان گو فارسی</description><generator>Hugo -- gohugo.io</generator><language>fa</language><managingEditor>ja7ad@live.com (Javad Rajabzadeh)</managingEditor><webMaster>ja7ad@live.com (Javad Rajabzadeh)</webMaster><copyright>2023 GoFarsi All rights reserved</copyright><atom:link href="https://book.gofarsi.ir/chapter-12/ethereum/feed.xml" rel="self" type="application/rss+xml"/><item><author>Javad Rajabzadeh</author><title>12.3.1 معرفی اتریوم</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum/</guid><description>&lt;h1 id="12311-اتریوم">
12.3.1.1 اتریوم
&lt;a class="anchor" href="#12311-%d8%a7%d8%aa%d8%b1%db%8c%d9%88%d9%85">#&lt;/a>
&lt;/h1>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/ethereum-logo.png" alt="Ethereum logo">
&lt;/a>&lt;/center>
&lt;p>بعد از حل مشکلاتی که برای ایجاد یک ارز یا سکه دیجیتالی یا مجازی وجود داشت توسط بیتکوین، با استفاده از ایجاد یک دفتر کل غیر متمرکز، دیتا مدل بلاکچین و سیستم غیرمتمرکز آن موقعیتی برای ایجاد و حل مشکلات دیگه فراهم کرد.&lt;/p>
&lt;p>ویتالیک بوترین ایده اتریوم و وایت پیپر ان را اولین بار در سال ۲۰۱۳ منتشر کرد. او یک فعال در مجله بیتکوین بود و اعتقاد داشت بیتکوین دارای مشکلاتی است که باید برطرف شود. او در سال ۲۰۱۴ با چند توسعه دهنده دیگر در ماه اوت همان سال برای اجرای ایده خود شروع به جذب سرمایه کرد.&lt;/p>
&lt;p>همانطور که ایده ها حول و محور یک سکه دیجیتالی پیش از بیتکوین زیاد بود، قبل از اتریوم و حتی بیتکوین هم افرادی فکر استفاده از ماشین ها برای اجرا و مدیریت قرارداد ها داشتند. اما مساله تغییر پذیر بودن کد های ماشینی و همیشه در دسترس بودن آنها کار را دشوار تر میکرد.&lt;/p>
&lt;p>همانطور که در بخش قبل (معرفی بلاکچین)توضیح دادیم، یک بلاکچین یک دیتابیس توزیع شده کاملا غیر قابل تغییر است. و همینطور همیه چیز در آن شفاش و اعتبار سنجی شده است. در کنار تمام این موارد نسبت به تعداد node ها شبکه همیشه دسترسی پذیر است و میتوان به دسترسی پذیر بودن اطلاعات بر بستر آن هم اعتماد کرد.&lt;/p>
&lt;p>از طرفی مدل های اجماعی قبلی هم مشکلاتی مثل هزینه بر بودن و ایجاد مشکلات در طبعیت را داشتند. در ادامه به حل این مشکلات در اتریوم میپردازیم.&lt;/p>
&lt;h2 id="123111-ماشین-مجازی-اتریوم-و-قرار-داد-های-هوشنمد">
12.3.1.1.1 ماشین مجازی اتریوم و قرار داد های هوشنمد
&lt;a class="anchor" href="#123111-%d9%85%d8%a7%d8%b4%db%8c%d9%86-%d9%85%d8%ac%d8%a7%d8%b2%db%8c-%d8%a7%d8%aa%d8%b1%db%8c%d9%88%d9%85-%d9%88-%d9%82%d8%b1%d8%a7%d8%b1-%d8%af%d8%a7%d8%af-%d9%87%d8%a7%db%8c-%d9%87%d9%88%d8%b4%d9%86%d9%85%d8%af">#&lt;/a>
&lt;/h2>
&lt;p>این خصوصیات برای ما این فرصت را ایجاد کرد تا &lt;a href="https://en.wikipedia.org/wiki/Smart_contract">قرارداد های هوشمند&lt;/a> را اختراع کنیم و پیشتاز این صنعت ویتالیک بوترین با ایده ماشین مجازی اتریوم بود!&lt;/p>
&lt;p>اتریوم، یک بلاکچین نسل دوم است که اولین بار با مدل اجماع اثبات کار PoW و قابلیت پشتیبانی از قرارداد های هوشمند اراعه شد.
طبق بژ پیپر اتریوم (بژ پیپر نسخه ای ساده نویسی شده و خلاصه شده از یلو پیپر است.) هدف اصلی اتریوم ارز اتر نیست. (ارز شبکه اتریوم اتر و مرسوم ترین خرده واحد آن وی می باشد)
هدف اصلی اتریوم ماشین مجازی آن است. شبکه اتریوم، مجموعه ای از نود ها هستند که نرم افزار اتریوم (یک پیاده سازی از اتریوم) را اجرا میکنند و با دیتا مدل بلاکچین استیت کلی را نگهداری میکنند. زمانی که یک قرارداد هوشمند روی اتریوم مستقر میشود، تمامی نود های شبکه یک &lt;a href="https://en.wikipedia.org/wiki/Bytecode">بایت کد&lt;/a> از ان را نگهداری میککند.&lt;/p>
&lt;p>پس شما میتوانید به راحتی، با استاندارد های اتریوم قرارداد برای مثال مالی خود را بنویسید، و روی شبکه اتریوم مستقر کنید. این امر باعث میشود که شما بدون واسطه، به دسترسی پذیر بودن، شفاف بودن (تمام بایت کد ها روی شبکه اتریوم قابل استعلام و خواندن است. به نحوی هر قرارداد هوشنمند مجبور است متن باز باشد. قابل ذکر است که سورس کدی که کامپایل نشده در شبکه نگهداری نمیشود اما معمولا اکسپلورر ها یک نسخه اعتبارسنجی شده از سورس کد را اراعه میدهند) ان مطمن باشید.&lt;/p>
&lt;p>امامرحله مهم بعدی، اجرای آن قرار داد بصورت مطمن است. هر نود اتریوم یک ماشین مجازی روی خود دارد که از توانایی اجرا بایت کد های اتریوم برخوردار است. یکی از دلایل اجرا نشدن مستقیم کانترکت ها این است که ما در ازای مقدار ورودی ثابت و اجرای توابع کانترکت روی هر نود توقع خروجی ثابت داریم. همانطور که در بخش های قبل اشاره کردیم در بلاکچین بصورت مستقیم به اطلاعات خارج از زنجیره (off-chain) اعتماد نمی کنیم. پس وضعیت نود اجرا کننده نباید در اجرای قرارداد ما اثر گذار باشد.&lt;/p>
&lt;p>پس هر نود سورس کد قرار داد هوشنمد شما به علاوه یک ماشین مجازی برای اجرا آن را دارد. از طرفی ما نمیتوانیم توان پردازشی را بین تمام شبکه تقسیم کنیم و بگوییم که همه نود ها باهم یک تابع را جرا کنند. پس تغییر نهایی قرارداد را روی استیت کلی شبکه اتریوم اعمال میکنیم. که با یک تراکنش که ان را contract call صدا میزنیم انجام میشود.
در نتیجه همه برای اعمال تغییر، خروجی را اعتبار سنجی میکنند.&lt;/p>
&lt;p>تمام کانترکت های اتریوم دسترسی به برخی از اطلاعات شبکه، نوشتن و خواندن از ان را دارند و میتوانند مجوز برداشت اتر از صاحب یک حساب بگیرند یا به حساب های مختلف اتر وایز کنند.&lt;/p>
&lt;p>هر کانترکت در شبکه اتریوم (و عمد بلاکچین های موجود) حکم یک شی در &lt;a href="https://en.wikipedia.org/wiki/Programming_paradigm">پارادایم برنامه نویسی&lt;/a> شی گرا را دارد. برای مثال انها استکی مخصوص خود دارند و یا برای صدا زدن یکدگیر باید یک نسخه (instance) از دیگری بسازند.
که در این باره در بخش کانترکت و ماشین مجازی اتریوم بصورت مفصل میپردازیم.
از طرفی دیگر تمام کانترکت های اتریوم یک فضای ذخیره سازی کلید و مقداری (key/value)هم دارند.&lt;/p>
&lt;p>اما مساله پر اهمیت بعدی این است که چرا یک نود باید کانترکت هارا نگهداری و اجرا کند؟؟؟
برای نگهداری و اعتبار سنجی بلاک ها بصورت صادقانه، ما یک جایزه مشخص کردیم. در اصل در ازای صادق بودن و کمک کردن به شبکه ما یک تشویق و برای تلاش در نابود کردن شبکه تنبیه تعریف کردیم. با روش های مختلف.
راه حل قرارداد های هوشنمد هم همین مساله است. زمانی که شما یک کانترکت کال انجام میدهید، اولا نیاز به پرداخت کارمز تراکنش خود هستید، اما بخش اصلی این است که تمام بایت کد های اتریوم یک مبلغ بدون واحد (unit less) به عنوان هزینه اجرا یا gas دارند.&lt;/p>
&lt;p>برای مثال زمانی که شما یک تابع در یک کانترکت را صدا میزنید، تابعی که شما صدا زده اید از ۵ اوپریشن کد (operation code) تشکیل شده.
که هر اوپریشن کد ۳ gas نیاز دارد.
(توضیح و جزییات اوپریشن کد ها در بخش ماشین مجازی اتریوم و اسمارت کانترکت انجام میشود)
از ان رو که gas واحدی ندارد پس هزینه gas هر کانترکت کال به gas مشخص و ثابت است.
اما قیمت هر gas نسبت به بار شبکه و حجم تراکنش ها متفاوت است
برای مثال همین الان که این متن نوشته میشود قیمت هر gas حدود ۲۵ gwei است (گیگا وی)
حال اگر شما یک کانترکت کال با هزینه مشخص 100 وی انجهام دهید، نیاز به پرداخت ۲۵۰۰ gwei یا 0.068 دلار به عنوان gas دارید.&lt;/p>
&lt;p>پس نودی که کانترکت شما را اجرا میکند دلیلی منطقی برای اجرا و نگهداری از ان دارد. و علت ایجاد ارز اتر همین پاداش و هزینه اجرا کانترکت ها است.&lt;/p>
&lt;h2 id="123112-مدل-اجماع-اثبات-سهام-proof-of-stake-or-pos">
12.3.1.1.2 مدل اجماع اثبات سهام (Proof of Stake or PoS)
&lt;a class="anchor" href="#123112-%d9%85%d8%af%d9%84-%d8%a7%d8%ac%d9%85%d8%a7%d8%b9-%d8%a7%d8%ab%d8%a8%d8%a7%d8%aa-%d8%b3%d9%87%d8%a7%d9%85-proof-of-stake-or-pos">#&lt;/a>
&lt;/h2>
&lt;p>مدل اجماع اولیه شبکه اتریوم، مدل &lt;a href="https://en.wikipedia.org/wiki/Proof_of_work">اثبات کار&lt;/a> بود. اما بعد ازمدتی اتریوم از مدل جدیدی به اسم اثبات سهام امنیت و یکپارچی خود را تظمین کرد.&lt;/p>
&lt;p>در مدل &lt;a href="https://en.wikipedia.org/wiki/Proof_of_stake">اثبات سهام&lt;/a>، مسابقه ای وجود ندارد. بجای ماینر ها هر نود نقش یک شخص که وضیفه اعتبار سنجی بلاک هارا دارد را بازی میکند. اما چطور اعتماد به نود ها صورت میگیرد؟&lt;/p>
&lt;p>هر نود برای اینکه در فرایند اجماع شرکت داده بشود، مبلغی از ارز شبکه را استیک میکند. بعد از استیک شدن قابلیت جابه جایی ان وجود ندارد و به نحوی تحت کنترل شبکه است. این استیک حکم اعتبار ان نود را دارد. زمانی که شما دست به تقلب بزنید، استیک های شما در خطر خواهد بود. پس هرچه شما ارزش بیشتری را استیک کنید، مبلغ بیشتری برای از دست دادن دارید. پس احتمالا کمتر به فکر صادق نبودن هستید و در نتیجه معتبر تر هستید.&lt;/p>
&lt;p>زمانی که ۱۰۰ نود برای مثال با استیک های مختلف وجود دارند، یک شخص بصورت تصادفی برای ثبت بلاک جدید انتخاب میشود و نیازی به هیچگونه مسابقه ای نیست. اما شخص انتخاب شده نیاز دارد که بلاک مورد نظر را اراعه کند و بقیه نود ها ان را تایید کنند. احتمال اینکه شما انتخاب شوید بیشتر است، اما اگر استیک بیشتری داشته باشید.&lt;/p>
&lt;p>حداقل استیک در اتریوم در این موقع حدود ۳۲ اتر است. همچین شما قابلیت unstake کردن نود خود را دارید اما فرایند زمان بری است و بعد از ان نود شما در فرایند اجماع شرکت داده نخواهد شد.&lt;/p>
&lt;p>هر نود بعد از انتخاب شدن، بلاک خود را اراعه میکند و دیگر نود ها رای میدهند. اگر بلاک تایید شود همه انرا به دفتر کل خود اضافه میکنند و جایزه بلاک به نود مورد نظر میرسید. اگر بلاک رد شود و به مرور نود مشکوک برسد، همانطور که گفتیم استیک ها در خطرند.&lt;/p>
&lt;p>در این مدل اجماع، ما بجای مفهوم ماینر یا استخراج کننده از مفهوم و کلمه ولیدیتور و یا اعتبارسنجی کننده استفاده میکنیم. و بجای ماین یا استخراج از کلمه مینت شدن یا ضرب شدن استفاده میکنیم.&lt;/p>
&lt;p>در این مدل اجماع ما با قفل کردن دارایی های خود هم اعتبار خود را اثبات میکنیم، و هم مشخص میکنیم که از شبکه ای که در حال فعالیت هستیم سهمی سهامی داریم. پس هر حرکت اسیب زننده ای دارایی مارا به دو نحو در خطر میندازد.&lt;/p>
&lt;p>این مدل اجماع هزینه منابع کمتری دارد و برای طبیعت به نسبت بیت کوین کم ضرر تر است.
(نکته مهم این است که شبکه بیتکوین هزاران بار از وضعیت فعلی طلا و ارز های فیات متمرکز کاغذی وضعیت بهتری دارد و بشدت کم ضرر تر است.)&lt;/p>
&lt;p>در بخش اجماع بصورت جزیی تر به این مدل اجماع میپردازیم.&lt;/p>
&lt;h2 id="123112--world-state">
12.3.1.1.2 world state
&lt;a class="anchor" href="#123112--world-state">#&lt;/a>
&lt;/h2>
&lt;p>در شبکه اتریم یک استیت جهانی (شبیه به دفتر کل بیتکوین) وجود دارد. اطلاعاتی که تمامی نود ها بصورت یکپارچه از وضعیت ماشین مجازی اتریوم و حساب ها نگهداری میکنند همان ورلد استیت اتریوم است.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/world-state.png" alt="world state">
&lt;/a>&lt;/center>
&lt;p>تغییرت و تراکنش های اعمال شده در اطلاعات یک نود با دیگر نود ها در یک شبکه همتا به همتا صورت میگیرد (در ادامه به جزییات این شبکه بیشتر خواهیم پرداخت).&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/p2p-net.png" alt="P2P">
&lt;/a>&lt;/center>
&lt;p>گفتنی است که این تغییرات نیاز دارند تا در مرحله اجماع به تایید اکثریت نود ها برسند تا در استیت جهانی اعمال شوند. و پیام های رد و بدل شد در فرایند اجماع در همین شبکه همتا به همتا منتقل میشوند.&lt;/p>
&lt;p>راه ارتباطی کابر با نود های شبکه برای خواندن و نوشتن اطلاعات بر ورلد استیت یک API وب ۳ است.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/web3-API.png" alt="web3 API">
&lt;/a>&lt;/center>
&lt;p>شما برای هر مدل از عملیات نوشتن نیاز به ایجاد یک تراکنش دارید که بسته به تراکنش و بار شبکه کارمزدی متفاوت دارد.
اما برای خواندن اطلاعات از شبکه مثل اطلاعات یک بلاک یا حافظه یک قرارداد هوشمند کارمزدی در نظر گرفته نمیشود و نیازی به ایجاد تراکنش نیست و RPC هایی جهت اینکار اراعه میشود.&lt;/p>
&lt;blockquote>
&lt;p>ایجاد تراکنش هم با اراعه تراکنش خام امضا شده به همین RPC صورت میگیرد.&lt;/p>
&lt;/blockquote></description></item><item><author>Javad Rajabzadeh</author><title>12.3.2 رمزنگاری</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-cryptography/</guid><description>&lt;p>رمزنگاری&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.3 آدرس ها و کلیدها</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-keys-and-addresses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-keys-and-addresses/</guid><description>&lt;p>آدرس ها و کلیدها&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.4 اکانت ها</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-accounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-accounts/</guid><description>&lt;p>همانطور که میدانید اتریوم از مدل account based بجای &lt;a href="https://en.wikipedia.org/wiki/Unspent_transaction_output">UTXO&lt;/a> استفاده میکند.
اکانت ها در اتریوم، با شبکه بیتکوین تفاوت هایی اساسی دارند. اکانت های اتریوم بصورت کلی به دو دسته EOA و CA تقسیم میشوند.
(external owned account) (contract account)&lt;/p>
&lt;p>در ادامه به خصوصیات و جزییات هر یک از اکانت های کانترکت و اکانت های مالک خارجی (کنترل شده توسط شخص) میپردازیم.&lt;/p>
&lt;h1 id="12341-external-owned-accounts-eoa">
12.3.4.1 external owned accounts (EOA)
&lt;a class="anchor" href="#12341-external-owned-accounts-eoa">#&lt;/a>
&lt;/h1>
&lt;p>حساب های کنترل شده توسط افراد خارجی یا کنترل شده توسط شخص، حساب هایی معمولی هستند که توانایی نگهداری ارز اتر و انتقال ان با استفاده از ایجاد تراکنش بر روی شبکه را دارند.&lt;/p>
&lt;p>این اکانت ها با یک کلید خصوصی کنترل میشوند.&lt;/p>
&lt;p>این اکانت های دارای دو بخش هستند (هر ادرس یا کلید عمومی به یک فیلد دو بخشی از این اطلاعات در ورلد استیت اتریوم اشاره دارد.)&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../static/assets/img/content/chapter12/ethereum/EOA.png" alt="EOA">
&lt;/a>&lt;/center>
&lt;h2 id="123411-nonce">
12.3.4.1.1 nonce
&lt;a class="anchor" href="#123411-nonce">#&lt;/a>
&lt;/h2>
&lt;p>مقدار اول یا عدد نانس یک شمارنده برای حساب مورد نظر است. در ازای هر تراکنش که حساب شما ایجاد میکند یک واحد به مقدار نانس اضافه میشود. برای مثال اگر نانس حساب شما ۱۳ باشد یعنی شما تا به حال ۱۴ تراکنش ایجاد کرده اید. (شمارش از ۰ شروع میشود) اما گفتنی است که خواندن اطلاعات یا تراکنش هایی که به حساب شما به عنوان مقصد صورت میگیرد تاثیری در نانس حساب شما ندارد.&lt;/p>
&lt;p>اما بحث اصلی خاصیت عدد نانس است. زمانی که حساب شما تراکنشی ایجاد میکند تراکنش مورد نظر شامل عدد نانس حساب مبدا هم میشود. در همین حین نود های اتریوم میتوانند بر اساس نانس تراکنش شما را از روی ترتیب این شمارنده اجرا کنند. (در شبکه اتریوم انتخاب تراکنش توسط نود ها پردازش انها بصورت کلی به ترتیب نیست و بستگی به نود ها و بار شبکه و تراکنش دارد. در بخش تراکنش به جزییات این مساله میپردازیم.) یعنی اگر سه تراکنش متوالی از طرف شما ثبت شود. به انها بر اساس نانس ترتیب بندی میشوند و با اینکه اجرای کل تراکنش ها به ترتیب نیست اما تراکنش های هر شخص باید دقیقا زمانی اجرا شوند که یک واحد به نانس فعلی اضافه کنند. و در این حالت ترتیب تراکنش های شما حفظ خواهد شد.&lt;/p>
&lt;p>اما یکی از کاربرد های اصلی نانس جلوگیری از &lt;a href="https://en.wikipedia.org/wiki/Replay_attack">حمله تکرار&lt;/a> است. (reply attack) برای مثال اگر الیس به باب ۱ اتر انتقال دهد. و این تراکنش شامل نانس نشود. باب با پیدا کردن تراکنش امضا شده الیس بر بستر شبکه میتواند انرا تکرار کند و از موجودی حساب الیس کم کند. اما زمانی که در تراکنش امضا شده نانس هم قرار بگیرد هر تراکنش حتی با مقصد و مبدا و مبلغ ثابت هم از هم متمایز هستند. و زمانی که تراکنشی تکراری ثبت شود نانس مورد نظر با نانس حساب مبدا همخوانی ندارد. پس نود ها انرا رد میکنند. و باب نیاز دارد تا یک تراکنش جدید با نانس جدید داشته باشد.&lt;/p>
&lt;h2 id="123412-balance">
12.3.4.1.2 balance
&lt;a class="anchor" href="#123412-balance">#&lt;/a>
&lt;/h2>
&lt;p>مقدار دوم یک بالانس یا موجودی است که بطور خلاصه این بالانس مقدار موجودی یک حساب را به وی (wei) نمایش میدهد و نگهداری میکند.&lt;/p>
&lt;h1 id="12342-contract-accounts-ca">
12.3.4.2 contract accounts (CA)
&lt;a class="anchor" href="#12342-contract-accounts-ca">#&lt;/a>
&lt;/h1>
&lt;p>نوع دوم اکانت های اتریوم اکانت های قرار داد هوشمند است. این حساب ها قابلیت پردازش تراکنش و ایجاد تغییر در ورلد استیت را دارا هستند.
این حساب ها بجای یک کلید خصوصی توسط یک کد EVM کنترل میشوند.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../static/assets/img/content/chapter12/ethereum/CA.png" alt="CA">
&lt;/a>&lt;/center>
&lt;h2 id="123421-nonce">
12.3.4.2.1 nonce
&lt;a class="anchor" href="#123421-nonce">#&lt;/a>
&lt;/h2>
&lt;p>نانس در کانترکت ها با عدد صفر شروع میشد که طی &lt;a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-161.md">EIP-161&lt;/a> این عدد به یک تغییر کرد.
بر خلاف حساب های عادی در حساب های کانترکت تنها زمانی نانس افزایش پیدا میکند که کانترکت یک کانترکت جدید بسازد.&lt;/p>
&lt;blockquote>
&lt;p>کانترکت ها میتوانند کانترکت های جدیدی بر روی شبکه مستقر کنند.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>هیچ کانترکتی نمیتواند مالک کانترکت دیگری باشد. اما زمانی که کاربری با یک تراکنش تابعی از یک کانترکت ایجاد میکند که کانترکتی دیگر ایجاد شود. نانس کانترکت افزایش پیدا میکند. و مالک کانترکت حساب ایجاد کننده تراکنش خواهد بود.&lt;/p>
&lt;/blockquote>
&lt;p>همچنین خوب است نگاهی به این رشته در وبسایت استک اکسچنج اتریوم بیندازید:
&lt;a href="https://ethereum.stackexchange.com/questions/764/do-contracts-also-have-a-nonce">https://ethereum.stackexchange.com/questions/764/do-contracts-also-have-a-nonce&lt;/a>&lt;/p>
&lt;h2 id="123422-balance">
12.3.4.2.2 balance
&lt;a class="anchor" href="#123422-balance">#&lt;/a>
&lt;/h2>
&lt;p>حساب های کانترکت هم مثل حساب های شخصی یا EOA دارای موجودی هستند. که موجودی انها به واحد wei نگهداری میشود.&lt;/p>
&lt;h2 id="123423-code-hash">
12.3.4.2.3 code hash
&lt;a class="anchor" href="#123423-code-hash">#&lt;/a>
&lt;/h2>
&lt;p>همانطور که میدانید حساب های کانترکت شامل یک کد که توسط ماشین مجازی اتریوم قابل اجرا هستند را هم شامل میشوند.
خود مقدار بایت کد های کانترکت در دیتابیس نود ها بصورت کلید و مقدار نگهداری میشود. در مقدار خود حساب در استیت جهانی یک هش از حساب نگهداری میشود. دلیل نگهداری شدن هش این است که زمانی که با تغییر نانس یا موجودی نیاز به محاسبه دوباره ریشه هش حساب (درخت مرکل) می باشد این محاسبه ارزان تر از محاسبه کل مقدار کد خواهد بود.&lt;/p>
&lt;p>با این روش ما کد مربوط به حساب را میتوانیم در دیتابیس نود پیدا کنیم. انرا اعبتار سنجی کنیم که یک کد مربوط به ان حساب اجرا خواهد شد. و در نهایت حین محسابیه ریشه هش درخت مرکل حساب هزینه کمی صرف خواهیم کرد.&lt;/p>
&lt;h2 id="123424-storage-root">
12.3.4.2.4 storage root
&lt;a class="anchor" href="#123424-storage-root">#&lt;/a>
&lt;/h2>
&lt;p>همانطور که اشاره کردیم هر کانترکت به یک دیتابیس با مدل مقدار و کلید (key/value) دسترسی دارد.
این مقادیر در دیتابیس نود ها نگهداری میشوند. ریشه درخت مرکل این دیتا ها (مربوط به همان کانترکت خاص فقط) در این بخش نگهداری میشود. علت نگهداری این هش مشابه نگهداری هش کد کانترکت است.&lt;/p>
&lt;p>با این روت هش میتوان فضای ذخیره سازی کانترکت را اعتبار سنجی کرد. تغییر ان را تشخیص داد و همچنین از جایی که یک روت هش از ان داریم محسابه روت هش خود حساب را ارزان نگه میدارد.&lt;/p>
&lt;h1 id="12343-address">
12.3.4.3 address
&lt;a class="anchor" href="#12343-address">#&lt;/a>
&lt;/h1>
&lt;p>آدرس های حساب های شخصی و کانترکت تفاوت هایی دارند. در بخش کلید ها و ادرس بصورت جزیی انهارا بررسی کرده ایم. اما در این بخش هم توضیحی خلاصه جهت تکمیل مطلب خواهیم داشت.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../static/assets/img/content/chapter12/ethereum/address.png" alt="address">
&lt;/a>&lt;/center>
&lt;h2 id="123431-eoa">
12.3.4.3.1 EOA
&lt;a class="anchor" href="#123431-eoa">#&lt;/a>
&lt;/h2>
&lt;p>ادرس در اکانت های شخصی از هش شدن کلید عمومی بدست می آید. که طول ان ۶۴ کاراکتر بر مبنای ۱۶ است.&lt;/p>
&lt;h2 id="123432-ca">
12.3.4.3.2 CA
&lt;a class="anchor" href="#123432-ca">#&lt;/a>
&lt;/h2>
&lt;p>ادرس حساب های کانترکت از هش ادرس حساب مالک (حساب شخصی که تراکنش استقرار کانترکت را ایجاد میکند.) و عدد نانس همان حساب بدست می اید که طول ان ۴۲ کاراکتر بر مبنای ۱۶ است.&lt;/p>
&lt;h1 id="12344-ادرس-صفر">
12.3.4.4 ادرس صفر
&lt;a class="anchor" href="#12344-%d8%a7%d8%af%d8%b1%d8%b3-%d8%b5%d9%81%d8%b1">#&lt;/a>
&lt;/h1>
&lt;p>آدرس صفر در شبکه اتریوم یک ادرس است که همراه با ایجاد اولین بلاک ایجاد میشود. این آدرس یک حساب شخصی یا کانترکت نیست و هیچ کلید خصوصی و مالکی هم ندارد. همچنین هیچ خروجی یا تراکنشی از این آدرس به بیرون وجود ندارد.&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.5 تراکنش ها و پیام ها</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-transactions-and-messages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-transactions-and-messages/</guid><description>&lt;h1 id="12351-تراکنش-ها-در-بلاکچین-اتریوم">
12.3.5.1 تراکنش ها در بلاکچین اتریوم
&lt;a class="anchor" href="#12351-%d8%aa%d8%b1%d8%a7%da%a9%d9%86%d8%b4-%d9%87%d8%a7-%d8%af%d8%b1-%d8%a8%d9%84%d8%a7%da%a9%da%86%db%8c%d9%86-%d8%a7%d8%aa%d8%b1%db%8c%d9%88%d9%85">#&lt;/a>
&lt;/h1>
&lt;p>تراکنش ها در شبکه اتریوم دارای خصوصیاتی متفاوت از تراکنش ها در بیتکوین هستند. علل اصلی این تفاوت ها روش متفاوت اتریوم برای جلوگیری از برخی از حملات و همچنین نیاز به مناسب بودن برای اجرا کانترکت ها در ازای تراکنش ها می باشد.&lt;/p>
&lt;p>در اتریوم تراکنش ها بصورت اتمیک هستند. یعنی ما نمیتوانیم یک تراکنش را به قسمت های دیگری تقسیم و بصورت جدا اجرا و اراعه کنیم. همچنین وضعیت یک تراکنش در اتریوم تنها دو حالت میتوانند داشته باشند. یا انجام شده اند و تغییری برروی ورلد استیت ایجاد کرده اند یا انجام نشده و اثری بر شبکه ندارند.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/atomic-transaction.png" alt="atomic">
&lt;/a>&lt;/center>
&lt;p>در شبکه اتریوم تراکنش ها بصورت ترتیبی و اجرا شوند و هیچ دو تراکنشی بصورت همزمان اجرا و پردازش نمیشوند. همچنین تراکنش ها در اتریوم قابلیت همپوشانی ندارند.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/ordered-transaction.png" alt="ordered">
&lt;/a>&lt;/center>
&lt;h2 id="123511-فیلد-های-یک-تراکنش-در-اتریوم">
12.3.5.1.1 فیلد های یک تراکنش در اتریوم
&lt;a class="anchor" href="#123511-%d9%81%db%8c%d9%84%d8%af-%d9%87%d8%a7%db%8c-%db%8c%da%a9-%d8%aa%d8%b1%d8%a7%da%a9%d9%86%d8%b4-%d8%af%d8%b1-%d8%a7%d8%aa%d8%b1%db%8c%d9%88%d9%85">#&lt;/a>
&lt;/h2>
&lt;p>اولین مقدار در یک تراکنش اتریومی نانس است. که در بخش حساب ها به ان پرداختیم. نانس یک عدد است که نشان میدهد چندمین تراکنشی است که توسط این حساب ایجاد میشود و تراکنش هایی با اطلاعات یکسان را متمایز میسازد که روشی جایگزین برای مقابله با reply attack.&lt;/p>
&lt;p>همانطور که میدانید بیتکوین از lock-time برای مقابله از این حمله استفاده میکند.&lt;/p>
&lt;p>دومین مقدار هر تراکنش قیمت gas میباشد. در اصل مبلغی است که ایجاد کننده تراکنش حاضر است در ازای هر gas بپردازد.&lt;/p>
&lt;p>سومین بخش محدودیت تعداد مراحل محساباتی است که برای اجرا تراکنش توسط ارسال کننده مشخص میشود. علت استفاده از این فیلد مدل Anti-DOS اتریوم میباشد.
برتی مثال جلوگیری از ایجاد حلقه های بینهایت و یا هدر دادن منابع پردازشی.&lt;/p>
&lt;p>فیلد بعدی نشان دهنده آدرس مقصد تراکنش است.
و بعد از آن مبلغ اتری که با این تراکنش جابه جا میشود.&lt;/p>
&lt;p>در نهایت فیلد دیتا که یک فیلد اختیاری است (در استقرار و صدا زدن قرارداد های هوشمند کاربرد دارد) شامل اطلاعاتی میشود که کانترکت مورد نظر میتواند انهارا بخواند. برای مثال اگر شما بخواهید یک رکورد ENS برای ایپی ادرس خود ثبت کنید در این قسمت از تراکنش خود ایپی و نام ENS خود را در صدا زدن کانترکت ENS قرار میدهید.&lt;/p>
&lt;p>همچنین تراکنش هایی که برای ایجاد یک قرارداد هوشمند جدید اجرا میشوند هم بایت کد های قرارداد هوشمند در این فیلد قرار میگیرد.&lt;/p>
&lt;p>اضافه کردن دیتا در این بخش مقدار gas را افزایش خواهد داد.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/transaction-fields.png" alt="fields">
&lt;/a>&lt;/center>
&lt;h2 id="123512-انواع-تراکنش-در-اتریوم">
12.3.5.1.2 انواع تراکنش در اتریوم
&lt;a class="anchor" href="#123512-%d8%a7%d9%86%d9%88%d8%a7%d8%b9-%d8%aa%d8%b1%d8%a7%da%a9%d9%86%d8%b4-%d8%af%d8%b1-%d8%a7%d8%aa%d8%b1%db%8c%d9%88%d9%85">#&lt;/a>
&lt;/h2>
&lt;p>تراکنش هادر شبکه اتریوم به دو دسته تقسیم می شوند. دسته اول تراکنش هایی هستند که باعث ایجاد و یا همان استقرار یک قرارداد هوشمند جدید بر روی شبکه میشوند. دربخش های قبل به این مدل از تراکنش ها بصورت خلاصه پرداخته ایم.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/types-of-transaction.png" alt="types">
&lt;/a>&lt;/center>
&lt;p>این تراکنش ها در فیلد دیتا یک بایت کد معتبر EVM ای را شامل میشوند.
ارسال کننده یا ادرس مقصد این تراکنش ها همیشه یک EOA میباشد که در نهایت مالک ان قرار داد به شمار می اید.&lt;/p>
&lt;p>مقصد این تراکنش ها ادرس صفر است.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/creating-contracts.png" alt="contracts">
&lt;/a>&lt;/center>
&lt;p>دسته دوم تراکنش ها در اتریوم تراکنش های message call است.&lt;/p>
&lt;p>در این تراکنش ها معمولا یا یک تابع در یک قرار داد هوشمند صدا زده میشود و یا یک جابه جایی اتر بین دو حساب شخصی صورت میگیرد.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/transaction-updating-contracts.png" alt="message-calls">
&lt;/a>&lt;/center>
&lt;h1 id="12351--پیام-ها-در-بلاکچین-اتریوم">
12.3.5.1 پیام ها در بلاکچین اتریوم
&lt;a class="anchor" href="#12351--%d9%be%db%8c%d8%a7%d9%85-%d9%87%d8%a7-%d8%af%d8%b1-%d8%a8%d9%84%d8%a7%da%a9%da%86%db%8c%d9%86-%d8%a7%d8%aa%d8%b1%db%8c%d9%88%d9%85">#&lt;/a>
&lt;/h1>
&lt;!-- TODO -->
&lt;h4 id="مثال-و-درک-بهتر">
مثال و درک بهتر
&lt;a class="anchor" href="#%d9%85%d8%ab%d8%a7%d9%84-%d9%88-%d8%af%d8%b1%da%a9-%d8%a8%d9%87%d8%aa%d8%b1">#&lt;/a>
&lt;/h4>
&lt;p>در نهایت برای درک بهتر مفهایم تراکنش و پیام ها در شبکه اتریوم (یا هر مفهوم دیگری در هر شبکه دیگیری) بررسی کردن بلاک اکسپلورر آن شبکه و دیدن این موارد در حالت بصری کمک خیلی خوبی به درک این مساعل میکند.
همچنین میتوانید با ایجاد یک حساب اتریوم در تست نت های اتریوم این موارد را بصورت عملی تست کنید. (در بخش های اینده به این مورد خواهیم پرداخت)&lt;/p>
&lt;p>&lt;a href="https://etherscan.io/">Ethereum Block explorer&lt;/a>&lt;/p>
&lt;h4 id="ارجاعات">
ارجاعات
&lt;a class="anchor" href="#%d8%a7%d8%b1%d8%ac%d8%a7%d8%b9%d8%a7%d8%aa">#&lt;/a>
&lt;/h4>
&lt;p>1- &lt;a href="https://cryptocurrency.medium.com/messages-and-transactions-on-ethereum-3c4dadfe7986">Messages and Transactions on Ethereum&lt;/a>&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.6 ماشین مجازی اتریوم</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-virtual-machine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-virtual-machine/</guid><description>&lt;h1 id="12361-ماشین-مجازی">
12.3.6.1 ماشین مجازی
&lt;a class="anchor" href="#12361-%d9%85%d8%a7%d8%b4%db%8c%d9%86-%d9%85%d8%ac%d8%a7%d8%b2%db%8c">#&lt;/a>
&lt;/h1>
&lt;p>قبل از شروع بررسی ماشین مجازی اتریوم به مفهوم ماشین مجازی میپردازیم. همانطور که در قسمت های قبل به ورلد استیت اتریوم اشاره کردیم و فهمیدیم که تمام نود های اتریوم یک حافظه وضعیت و یا حالت کلی دارند که همیشه باهم برابر است و در حالت یکسانی قرار دارد و تغییرات بر ورلد استیت با تراکنش ها اعمال میشوند.&lt;/p>
&lt;p>اما تمام شبکه اتریوم به خودی خود یه ورلد کامپیوتر هم میباشد که باید بتواند تمام تراکنش ها را اجرا کند و تغییرات انها را بر روی ورلد استیت اعمال کند. پس اصلی ترین رکن این ورلد کامپیوتر این است که در هر زمان توسط هر کدام از نود ها که اجرا شد خروجی برابری بدهد. (این مساله یکی از دلایلی است که با عدد نانس ترتیب تراکنش ها حفظ میشود و ماشین مجازی اتریوم قابلیت همزمانی را ندارد.)&lt;/p>
&lt;p>یک ماشین مجازی به زبان ساده یک محیط ایزوله درون یک سیستم عامل در حال اجرا بر روی یک کامپیوتر واقعی است که منابع اختصاصی خود را دارد و بدون گرفتن تاثیر از بقیه نرم افزار ها یا شرایط کامپیوتر اجرا میشود.&lt;/p>
&lt;p>با این شرایط بهترین انتخاب ما برای اجرای کد ها بر بستر بلاکچین ماشین های مجازی هستند. با استفاده از یک ماشین مجازی قرارداد های هوشمند تنها نیاز دارند به بایت کد های قابل درک برای evm کامپایل شوند نه بایت کد های مربوط به هر معماری پردازشگری که در لحظه نود اتریوم را اجرا میکند.
همچنین اطمینان داریم که اگر یک تراکنش توسط دو نود مختلف با شرایط مختلف اجرا شد خروجی ورلد استیت انها یکی خواهد بود.&lt;/p>
&lt;h1 id="12362-ماشین-مجازی-اتریوم">
12.3.6.2 ماشین مجازی اتریوم
&lt;a class="anchor" href="#12362-%d9%85%d8%a7%d8%b4%db%8c%d9%86-%d9%85%d8%ac%d8%a7%d8%b2%db%8c-%d8%a7%d8%aa%d8%b1%db%8c%d9%88%d9%85">#&lt;/a>
&lt;/h1>
&lt;p>اتریوم یک ماشین مجازی مختص خود دارد که وظیفه اجرا و اعمال تغییرات تراکنش هارا دارد. این ماشین مجازی را میتوان به JVM یا ماشین مجازی جاوا هم تشبیه کرد. که بایت کد های مخصوص خود را دارد و هر محیط که ماشین مجازی مورد نظر را داشته باشد میتواند ان کد را بدون نیاز به بایت کد های متفاوت اجرا کند.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/evm1.png" alt="evm">
&lt;/a>&lt;/center>
&lt;p>ماشین مجازی اتریوم یک ماشین مجازی استک بیس است.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/evm-stack.png" alt="evm stack machine">
&lt;/a>&lt;/center>
&lt;p>حافظه های در دسترسی یک ماشین مجازی اتریوم حین اجرا هر کانترکت به سه دسته تقسیم میشوند. مموری. استک و استورج.&lt;/p>
&lt;p>مموری یک حافظه موقت در حین اجرا کانترکت است. استورج یک حافظه داعمی است که نوشتن اطلاعات در استورج هزینه بالاتری دارد.(استورج بصورت کلید و مقدار است)&lt;/p>
&lt;p>و در نهایت استک یک حافظه موقت استیک بیس است که توسط کامپایلر استفاده میشود.&lt;/p>
&lt;p>&lt;a href="https://ethereum.stackexchange.com/questions/23720/usage-of-memory-storage-and-stack-areas-in-evm">بیشتر&lt;/a>&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/evm-spaces.png" alt="evm spaces">
&lt;/a>&lt;/center>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/evm-stack-space.png" alt="evm stack spaces">
&lt;/a>&lt;/center>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/evm-memory.png" alt="evm memory">
&lt;/a>&lt;/center>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/evm-storage.png" alt="evm storage">
&lt;/a>&lt;/center>
&lt;h2 id="123621-کد-های-قابل-اجرا">
12.3.6.2.1 کد های قابل اجرا
&lt;a class="anchor" href="#123621-%da%a9%d8%af-%d9%87%d8%a7%db%8c-%d9%82%d8%a7%d8%a8%d9%84-%d8%a7%d8%ac%d8%b1%d8%a7">#&lt;/a>
&lt;/h2>
&lt;p>ماشین مجازی اتریوم بایت کد های مربوط به خود را دارد. در بخش های اینده به این بایت کد ها در جزییات میپردازیم. اما بصورت کلی این بایت کد ها همان کد هایی هستند که بر بستر شبکه اتریوم دیپلوی و اجرا میشوند.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/evm-bytecode.png" alt="evm bytecode">
&lt;/a>&lt;/center>
&lt;p>این بایت کد ها در حالت اسمبلی بصورت مجموعه ای از OP code ها یا اوپریشن کد ها نوشته میشوند که هر اوپریشن کد با یک عدد مشخص میشود.
بایت کد های اتریوم شماره اوپریشن کد ها و ورودی انها بصورت هگزادسیمال است. که توسط ماشین مجازی اتریوم قابل درک و اجرا میباشد. در بخش مربوط به بایت کد ها به جزییاتشان خواهیم پرداخت.&lt;/p>
&lt;p>نمونه ای از اوپریشن کد ها یک کانترکت ERC-20:&lt;/p>
&lt;p>‍```
PUSH1 0x80
PUSH1 0x40
MSTORE
CALLVALUE
DUP1
ISZERO
PUSH2 0x000f
JUMPI
PUSH0 0x
DUP1
REVERT
JUMPDEST
POP
PUSH1 0x04
CALLDATASIZE
LT
PUSH2 0x00cd
JUMPI
PUSH0 0x
CALLDATALOAD
PUSH1 0xe0&lt;/p>
&lt;pre tabindex="0">&lt;code>
نمونه بایت کد های همان کانترکت:
‍```
0x608060405234801561000f575f80fd5b50600436106100cd575f3560e01c806370a082311161008a57806395d89b411161006457806395d89b411461022d578063a9059cbb1461024b578063d505accf1461027b578063dd62ed3e14610297576100cd565b806370a08231146101a95780637ecebe00146101d957806384b0196e14610209576100cd565b806306fdde03146100d1578063095ea7b3146100ef57806318160ddd1461011f57806323b872dd1461013d578063313ce5671461016d5780633644e5151461018b575b5f80fd5b6100d96102c7565b6040516100e691906113de565b60405180910390f35b6101096004803603810190610104919061148f565b610357565b60405161011691906114e7565b60405180910390f35b610127610379565b604051610134919061150f565b60405180910390f35b61015760048036038101906101529190611528565b610382565b60405161016491906114e7565b60405180910390f35b6101756103b0565b6040516101829190611593565b60405180910390f35b6101936103b8565b6040516101a091906115c4565b60405180910390f35b6101c360048036038101906101be91906115dd565b6103c6565b6040516101d0919061150f565b60405180910390f35b6101f360048036038101906101ee91906115dd565b61040b565b604051610200919061150f565b60405180910390f35b61021161041c565b6040516102249796959493929190611708565b60405180910390f35b6102356104c1565b60405161024291906113de565b60405180910390f35b6102656004803603810190610260919061148f565b610551565b60405161027291906114e7565b60405180910390f35b610295600480360381019061029091906117de565b610573565b005b6102b160048036038101906102ac919061187b565b6106b8565b6040516102be919061150f565b60405180910390f35b6060600380546102d6906118e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610302906118e6565b801561034d5780601f106103245761010080835404028352916020019161034d565b820191905f5260205f20905b81548152906001019060200180831161033057829003601f168201915b5050505050905090565b5f8061036161073a565b905061036e818585610741565b600191505092915050565b5f600254905090565b5f8061038c61073a565b9050610399858285610753565b6103a48585856107e5565b60019150509392505050565b5f6012905090565b5f6103c16108d5565b905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f6104158261098b5...
&lt;/code>&lt;/pre>&lt;h2 id="123622-محیط-اجرا">
12.3.6.2.2 محیط اجرا
&lt;a class="anchor" href="#123622-%d9%85%d8%ad%db%8c%d8%b7-%d8%a7%d8%ac%d8%b1%d8%a7">#&lt;/a>
&lt;/h2>
&lt;p>بایت کد های اتریوم توسط ماشین مجازی اتریوم اجرا میشوند که خود بخشی از پیاده سازی نود اتریوم است. نود درحال اجرا هم بصورت مستقیم از منابع یک ماشین غیر مجازی استفاده میکند.&lt;/p>
&lt;center>&lt;a href="#">
&lt;img src="../../../assets/img/content/chapter12/ethereum/evm-layer.png" alt="evm layer">
&lt;/a>&lt;/center>
&lt;h2 id="123623-پیاده-سازی-geth">
12.3.6.2.3 پیاده سازی GETH
&lt;a class="anchor" href="#123623-%d9%be%db%8c%d8%a7%d8%af%d9%87-%d8%b3%d8%a7%d8%b2%db%8c-geth">#&lt;/a>
&lt;/h2>
&lt;p>تمامی عملکرد ماشین مجازی اتریوم در پیاده سازی رسمی اتریوم در این بخش قرار دارد:&lt;/p>
&lt;p>&lt;a href="https://github.com/ethereum/go-ethereum/blob/master/core/vm">https://github.com/ethereum/go-ethereum/blob/master/core/vm&lt;/a>&lt;/p>
&lt;p>برای مثال تعریف اوپریشن کد ها:&lt;/p>
&lt;p>&lt;a href="https://github.com/ethereum/go-ethereum/blob/master/core/vm/opcodes.go">https://github.com/ethereum/go-ethereum/blob/master/core/vm/opcodes.go&lt;/a>&lt;/p>
&lt;p>ساختار ماشین مجازی اتریوم در پیاده سازی گو اتریوم:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-1"> 1&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">// EVM is the Ethereum Virtual Machine base object and provides
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-2"> 2&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">// the necessary tools to run a contract on the given state with
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-3"> 3&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">// the provided context. It should be noted that any error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-4"> 4&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">// generated through any of the calls should be considered a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-5"> 5&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">// revert-state-and-consume-all-gas operation, no checks on
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-6"> 6&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">// specific errors should ever be performed. The interpreter makes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-7">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-7"> 7&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">// sure that any errors generated are to be considered faulty code.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-8">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-8"> 8&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-9">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-9"> 9&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">// The EVM should never be reused and is not thread safe.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-10">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-10">10&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> EVM &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-11">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-11">11&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// Context provides auxiliary blockchain related information
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-12">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-12">12&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> Context BlockContext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-13">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-13">13&lt;/a>&lt;/span>&lt;span> TxContext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-14">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-14">14&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// StateDB gives access to the underlying state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-15">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-15">15&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> StateDB StateDB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-16">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-16">16&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// Depth is the current call stack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-17">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-17">17&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> depth &lt;span style="color:#8be9fd">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-18">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-18">18&lt;/a>&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-19">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-19">19&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// chainConfig contains information about the current chain
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-20">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-20">20&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> chainConfig &lt;span style="color:#ff79c6">*&lt;/span>params.ChainConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-21">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-21">21&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// chain rules contains the chain rules for the current epoch
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-22">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-22">22&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> chainRules params.Rules
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-23">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-23">23&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// virtual machine configuration options used to initialise the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-24">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-24">24&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// evm.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-25">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-25">25&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> Config Config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-26">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-26">26&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// global (to this context) ethereum virtual machine
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-27">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-27">27&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// used throughout the execution of the tx.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-28">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-28">28&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> interpreter &lt;span style="color:#ff79c6">*&lt;/span>EVMInterpreter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-29">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-29">29&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// abort is used to abort the EVM calling operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-30">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-30">30&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> abort atomic.Bool
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-31">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-31">31&lt;/a>&lt;/span>&lt;span> &lt;span style="color:#6272a4">// callGasTemp holds the gas available for the current call. This is needed because the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-32">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-32">32&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// available gas is calculated in gasCall* according to the 63/64 rule and later
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-33">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-33">33&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// applied in opCall*.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-34">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-34">34&lt;/a>&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> callGasTemp &lt;span style="color:#8be9fd">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-35">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-35">35&lt;/a>&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>با بررسی پروژه های دیگر متوجه پیاده سازی های مختلفی از ماشین مجازی اتریوم در زبان های جاوااسکریپت راست و &amp;hellip; خواهید شد.&lt;/p>
&lt;!-- TODO: adding single thread infos here and comparing with Solana -->
&lt;!-- TODO: reviewing execution codes in geth here -->
&lt;!-- TODO: talking about gas and mem pool rules here??? -->
&lt;!-- TODO: talking with more detail, refrencing to the ETH docs/white paper or keep it simple??? --></description></item><item><author>Javad Rajabzadeh</author><title>12.3.7 بلاک ها</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-blocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-blocks/</guid><description>&lt;p>بلاک ها&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.8 الگوریتم اجماع</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-consensus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-consensus/</guid><description>&lt;p>الگوریتم اجماع&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.9 نودها و ماینرها</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-nodes-and-miners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-nodes-and-miners/</guid><description>&lt;p>نودها و ماینرها&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.10 شبکه</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-network/</guid><description>&lt;p>شبکه&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.11 قراردادهای هوشمند</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-smart-contracts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-smart-contracts/</guid><description>&lt;p>قراردادهای هوشمند&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.12 والت ها و کلاینت ها</title><link>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-wallets-and-clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/ethereum-wallets-and-clients/</guid><description>&lt;p>والت ها و کلاینت ها&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.13 معرفی go-ethereum</title><link>https://book.gofarsi.ir/chapter-12/ethereum/go-ethereum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/go-ethereum/</guid><description>&lt;p>معرفی go-ethereum&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.14 کار با اکانت ها</title><link>https://book.gofarsi.ir/chapter-12/ethereum/work-with-accounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/work-with-accounts/</guid><description>&lt;p>کار با اکانت ها&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.15 تراکنش برروی اتریوم</title><link>https://book.gofarsi.ir/chapter-12/ethereum/transactions-on-ethereum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/transactions-on-ethereum/</guid><description>&lt;p>تراکنش برروی اتریوم&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.16 نوشتن و ارتباط با قراردادهای هوشمند</title><link>https://book.gofarsi.ir/chapter-12/ethereum/read-write-in-smart-contracts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/read-write-in-smart-contracts/</guid><description>&lt;p>نوشتن و ارتباط با قراردادهای هوشمند&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.17 آشنایی با فایل ABI و bytecode</title><link>https://book.gofarsi.ir/chapter-12/ethereum/abi-and-bin-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/abi-and-bin-file/</guid><description>&lt;p>آشنایی با فایل ABI و bytecode&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.18 خواندن و دریافت لحظه ای لاگ های کانترکت ها</title><link>https://book.gofarsi.ir/chapter-12/ethereum/event-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/event-logs/</guid><description>&lt;p>خواندن و دریافت لحظه ای لاگ های کانترکت ها&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.19 ایجاد و تایید امضا</title><link>https://book.gofarsi.ir/chapter-12/ethereum/signature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/signature/</guid><description>&lt;p>ایجاد و تایید امضا&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.20 کار با geth</title><link>https://book.gofarsi.ir/chapter-12/ethereum/geth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/geth/</guid><description>&lt;p>کار با geth&lt;/p></description></item><item><author>Javad Rajabzadeh</author><title>12.3.21 کار با پروتکل whisper و swarm</title><link>https://book.gofarsi.ir/chapter-12/ethereum/protocol-swarm-and-whisper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ja7ad@live.com (Javad Rajabzadeh)</author><guid>https://book.gofarsi.ir/chapter-12/ethereum/protocol-swarm-and-whisper/</guid><description>&lt;p>کار با پروتکل whisper و swarm&lt;/p></description></item></channel></rss>